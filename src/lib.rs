
#![feature(braced_empty_structs, libc, negate_unsigned)]
#![allow(non_snake_case, non_upper_case_globals, non_camel_case_types)]
extern crate libc;
/* automatically generated by rust-bindgen */

pub type UChar = ::libc::c_uchar;
pub type Char = ::libc::c_char;
pub type HChar = ::libc::c_char;
pub type UShort = ::libc::c_ushort;
pub type Short = ::libc::c_short;
pub type UInt = ::libc::c_uint;
pub type Int = ::libc::c_int;
pub type ULong = ::libc::c_ulonglong;
pub type Long = ::libc::c_longlong;
pub type U128 = [UInt; 4usize];
pub type U256 = [UInt; 8usize];


pub type Float = ::libc::c_float;
pub type Double = ::libc::c_double;
pub type Bool = ::libc::c_uchar;
pub type Addr32 = UInt;
pub type Addr64 = ULong;
pub type HWord = ::libc::c_ulong;
pub type IRType = ::libc::c_uint;
pub const Ity_INVALID: ::libc::c_uint = 4352;
pub const Ity_I1: ::libc::c_uint = 4353;
pub const Ity_I8: ::libc::c_uint = 4354;
pub const Ity_I16: ::libc::c_uint = 4355;
pub const Ity_I32: ::libc::c_uint = 4356;
pub const Ity_I64: ::libc::c_uint = 4357;
pub const Ity_I128: ::libc::c_uint = 4358;
pub const Ity_F32: ::libc::c_uint = 4359;
pub const Ity_F64: ::libc::c_uint = 4360;
pub const Ity_D32: ::libc::c_uint = 4361;
pub const Ity_D64: ::libc::c_uint = 4362;
pub const Ity_D128: ::libc::c_uint = 4363;
pub const Ity_F128: ::libc::c_uint = 4364;
pub const Ity_V128: ::libc::c_uint = 4365;
pub const Ity_V256: ::libc::c_uint = 4366;
pub type IREndness = ::libc::c_uint;
pub const Iend_LE: ::libc::c_uint = 4608;
pub const Iend_BE: ::libc::c_uint = 4609;
pub type IRConstTag = ::libc::c_uint;
pub const Ico_U1: ::libc::c_uint = 4864;
pub const Ico_U8: ::libc::c_uint = 4865;
pub const Ico_U16: ::libc::c_uint = 4866;
pub const Ico_U32: ::libc::c_uint = 4867;
pub const Ico_U64: ::libc::c_uint = 4868;
pub const Ico_F32: ::libc::c_uint = 4869;
pub const Ico_F32i: ::libc::c_uint = 4870;
pub const Ico_F64: ::libc::c_uint = 4871;
pub const Ico_F64i: ::libc::c_uint = 4872;
pub const Ico_V128: ::libc::c_uint = 4873;
pub const Ico_V256: ::libc::c_uint = 4874;
#[repr(C)]
#[derive(Copy)]
pub struct IRConst {
    pub tag: IRConstTag,
    pub Ico: Ico,
}
impl ::std::clone::Clone for IRConst {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for IRConst {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Ico {
    pub _bindgen_data_: [u64; 1usize],
}
impl Ico {
    pub unsafe fn U1(&mut self) -> *mut Bool {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn U8(&mut self) -> *mut UChar {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn U16(&mut self) -> *mut UShort {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn U32(&mut self) -> *mut UInt {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn U64(&mut self) -> *mut ULong {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn F32(&mut self) -> *mut Float {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn F32i(&mut self) -> *mut UInt {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn F64(&mut self) -> *mut Double {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn F64i(&mut self) -> *mut ULong {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn V128(&mut self) -> *mut UShort {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn V256(&mut self) -> *mut UInt {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Ico {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Ico {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct IRCallee {
    pub regparms: Int,
    pub name: *const HChar,
    pub addr: *mut ::libc::c_void,
    pub mcx_mask: UInt,
}
impl ::std::clone::Clone for IRCallee {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for IRCallee {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct IRRegArray {
    pub base: Int,
    pub elemTy: IRType,
    pub nElems: Int,
}
impl ::std::clone::Clone for IRRegArray {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for IRRegArray {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type IRTemp = UInt;
pub type IROp = ::libc::c_uint;
pub const Iop_INVALID: ::libc::c_uint = 5120;
pub const Iop_Add8: ::libc::c_uint = 5121;
pub const Iop_Add16: ::libc::c_uint = 5122;
pub const Iop_Add32: ::libc::c_uint = 5123;
pub const Iop_Add64: ::libc::c_uint = 5124;
pub const Iop_Sub8: ::libc::c_uint = 5125;
pub const Iop_Sub16: ::libc::c_uint = 5126;
pub const Iop_Sub32: ::libc::c_uint = 5127;
pub const Iop_Sub64: ::libc::c_uint = 5128;
pub const Iop_Mul8: ::libc::c_uint = 5129;
pub const Iop_Mul16: ::libc::c_uint = 5130;
pub const Iop_Mul32: ::libc::c_uint = 5131;
pub const Iop_Mul64: ::libc::c_uint = 5132;
pub const Iop_Or8: ::libc::c_uint = 5133;
pub const Iop_Or16: ::libc::c_uint = 5134;
pub const Iop_Or32: ::libc::c_uint = 5135;
pub const Iop_Or64: ::libc::c_uint = 5136;
pub const Iop_And8: ::libc::c_uint = 5137;
pub const Iop_And16: ::libc::c_uint = 5138;
pub const Iop_And32: ::libc::c_uint = 5139;
pub const Iop_And64: ::libc::c_uint = 5140;
pub const Iop_Xor8: ::libc::c_uint = 5141;
pub const Iop_Xor16: ::libc::c_uint = 5142;
pub const Iop_Xor32: ::libc::c_uint = 5143;
pub const Iop_Xor64: ::libc::c_uint = 5144;
pub const Iop_Shl8: ::libc::c_uint = 5145;
pub const Iop_Shl16: ::libc::c_uint = 5146;
pub const Iop_Shl32: ::libc::c_uint = 5147;
pub const Iop_Shl64: ::libc::c_uint = 5148;
pub const Iop_Shr8: ::libc::c_uint = 5149;
pub const Iop_Shr16: ::libc::c_uint = 5150;
pub const Iop_Shr32: ::libc::c_uint = 5151;
pub const Iop_Shr64: ::libc::c_uint = 5152;
pub const Iop_Sar8: ::libc::c_uint = 5153;
pub const Iop_Sar16: ::libc::c_uint = 5154;
pub const Iop_Sar32: ::libc::c_uint = 5155;
pub const Iop_Sar64: ::libc::c_uint = 5156;
pub const Iop_CmpEQ8: ::libc::c_uint = 5157;
pub const Iop_CmpEQ16: ::libc::c_uint = 5158;
pub const Iop_CmpEQ32: ::libc::c_uint = 5159;
pub const Iop_CmpEQ64: ::libc::c_uint = 5160;
pub const Iop_CmpNE8: ::libc::c_uint = 5161;
pub const Iop_CmpNE16: ::libc::c_uint = 5162;
pub const Iop_CmpNE32: ::libc::c_uint = 5163;
pub const Iop_CmpNE64: ::libc::c_uint = 5164;
pub const Iop_Not8: ::libc::c_uint = 5165;
pub const Iop_Not16: ::libc::c_uint = 5166;
pub const Iop_Not32: ::libc::c_uint = 5167;
pub const Iop_Not64: ::libc::c_uint = 5168;
pub const Iop_CasCmpEQ8: ::libc::c_uint = 5169;
pub const Iop_CasCmpEQ16: ::libc::c_uint = 5170;
pub const Iop_CasCmpEQ32: ::libc::c_uint = 5171;
pub const Iop_CasCmpEQ64: ::libc::c_uint = 5172;
pub const Iop_CasCmpNE8: ::libc::c_uint = 5173;
pub const Iop_CasCmpNE16: ::libc::c_uint = 5174;
pub const Iop_CasCmpNE32: ::libc::c_uint = 5175;
pub const Iop_CasCmpNE64: ::libc::c_uint = 5176;
pub const Iop_ExpCmpNE8: ::libc::c_uint = 5177;
pub const Iop_ExpCmpNE16: ::libc::c_uint = 5178;
pub const Iop_ExpCmpNE32: ::libc::c_uint = 5179;
pub const Iop_ExpCmpNE64: ::libc::c_uint = 5180;
pub const Iop_MullS8: ::libc::c_uint = 5181;
pub const Iop_MullS16: ::libc::c_uint = 5182;
pub const Iop_MullS32: ::libc::c_uint = 5183;
pub const Iop_MullS64: ::libc::c_uint = 5184;
pub const Iop_MullU8: ::libc::c_uint = 5185;
pub const Iop_MullU16: ::libc::c_uint = 5186;
pub const Iop_MullU32: ::libc::c_uint = 5187;
pub const Iop_MullU64: ::libc::c_uint = 5188;
pub const Iop_Clz64: ::libc::c_uint = 5189;
pub const Iop_Clz32: ::libc::c_uint = 5190;
pub const Iop_Ctz64: ::libc::c_uint = 5191;
pub const Iop_Ctz32: ::libc::c_uint = 5192;
pub const Iop_CmpLT32S: ::libc::c_uint = 5193;
pub const Iop_CmpLT64S: ::libc::c_uint = 5194;
pub const Iop_CmpLE32S: ::libc::c_uint = 5195;
pub const Iop_CmpLE64S: ::libc::c_uint = 5196;
pub const Iop_CmpLT32U: ::libc::c_uint = 5197;
pub const Iop_CmpLT64U: ::libc::c_uint = 5198;
pub const Iop_CmpLE32U: ::libc::c_uint = 5199;
pub const Iop_CmpLE64U: ::libc::c_uint = 5200;
pub const Iop_CmpNEZ8: ::libc::c_uint = 5201;
pub const Iop_CmpNEZ16: ::libc::c_uint = 5202;
pub const Iop_CmpNEZ32: ::libc::c_uint = 5203;
pub const Iop_CmpNEZ64: ::libc::c_uint = 5204;
pub const Iop_CmpwNEZ32: ::libc::c_uint = 5205;
pub const Iop_CmpwNEZ64: ::libc::c_uint = 5206;
pub const Iop_Left8: ::libc::c_uint = 5207;
pub const Iop_Left16: ::libc::c_uint = 5208;
pub const Iop_Left32: ::libc::c_uint = 5209;
pub const Iop_Left64: ::libc::c_uint = 5210;
pub const Iop_Max32U: ::libc::c_uint = 5211;
pub const Iop_CmpORD32U: ::libc::c_uint = 5212;
pub const Iop_CmpORD64U: ::libc::c_uint = 5213;
pub const Iop_CmpORD32S: ::libc::c_uint = 5214;
pub const Iop_CmpORD64S: ::libc::c_uint = 5215;
pub const Iop_DivU32: ::libc::c_uint = 5216;
pub const Iop_DivS32: ::libc::c_uint = 5217;
pub const Iop_DivU64: ::libc::c_uint = 5218;
pub const Iop_DivS64: ::libc::c_uint = 5219;
pub const Iop_DivU64E: ::libc::c_uint = 5220;
pub const Iop_DivS64E: ::libc::c_uint = 5221;
pub const Iop_DivU32E: ::libc::c_uint = 5222;
pub const Iop_DivS32E: ::libc::c_uint = 5223;
pub const Iop_DivModU64to32: ::libc::c_uint = 5224;
pub const Iop_DivModS64to32: ::libc::c_uint = 5225;
pub const Iop_DivModU128to64: ::libc::c_uint = 5226;
pub const Iop_DivModS128to64: ::libc::c_uint = 5227;
pub const Iop_DivModS64to64: ::libc::c_uint = 5228;
pub const Iop_8Uto16: ::libc::c_uint = 5229;
pub const Iop_8Uto32: ::libc::c_uint = 5230;
pub const Iop_8Uto64: ::libc::c_uint = 5231;
pub const Iop_16Uto32: ::libc::c_uint = 5232;
pub const Iop_16Uto64: ::libc::c_uint = 5233;
pub const Iop_32Uto64: ::libc::c_uint = 5234;
pub const Iop_8Sto16: ::libc::c_uint = 5235;
pub const Iop_8Sto32: ::libc::c_uint = 5236;
pub const Iop_8Sto64: ::libc::c_uint = 5237;
pub const Iop_16Sto32: ::libc::c_uint = 5238;
pub const Iop_16Sto64: ::libc::c_uint = 5239;
pub const Iop_32Sto64: ::libc::c_uint = 5240;
pub const Iop_64to8: ::libc::c_uint = 5241;
pub const Iop_32to8: ::libc::c_uint = 5242;
pub const Iop_64to16: ::libc::c_uint = 5243;
pub const Iop_16to8: ::libc::c_uint = 5244;
pub const Iop_16HIto8: ::libc::c_uint = 5245;
pub const Iop_8HLto16: ::libc::c_uint = 5246;
pub const Iop_32to16: ::libc::c_uint = 5247;
pub const Iop_32HIto16: ::libc::c_uint = 5248;
pub const Iop_16HLto32: ::libc::c_uint = 5249;
pub const Iop_64to32: ::libc::c_uint = 5250;
pub const Iop_64HIto32: ::libc::c_uint = 5251;
pub const Iop_32HLto64: ::libc::c_uint = 5252;
pub const Iop_128to64: ::libc::c_uint = 5253;
pub const Iop_128HIto64: ::libc::c_uint = 5254;
pub const Iop_64HLto128: ::libc::c_uint = 5255;
pub const Iop_Not1: ::libc::c_uint = 5256;
pub const Iop_32to1: ::libc::c_uint = 5257;
pub const Iop_64to1: ::libc::c_uint = 5258;
pub const Iop_1Uto8: ::libc::c_uint = 5259;
pub const Iop_1Uto32: ::libc::c_uint = 5260;
pub const Iop_1Uto64: ::libc::c_uint = 5261;
pub const Iop_1Sto8: ::libc::c_uint = 5262;
pub const Iop_1Sto16: ::libc::c_uint = 5263;
pub const Iop_1Sto32: ::libc::c_uint = 5264;
pub const Iop_1Sto64: ::libc::c_uint = 5265;
pub const Iop_AddF64: ::libc::c_uint = 5266;
pub const Iop_SubF64: ::libc::c_uint = 5267;
pub const Iop_MulF64: ::libc::c_uint = 5268;
pub const Iop_DivF64: ::libc::c_uint = 5269;
pub const Iop_AddF32: ::libc::c_uint = 5270;
pub const Iop_SubF32: ::libc::c_uint = 5271;
pub const Iop_MulF32: ::libc::c_uint = 5272;
pub const Iop_DivF32: ::libc::c_uint = 5273;
pub const Iop_AddF64r32: ::libc::c_uint = 5274;
pub const Iop_SubF64r32: ::libc::c_uint = 5275;
pub const Iop_MulF64r32: ::libc::c_uint = 5276;
pub const Iop_DivF64r32: ::libc::c_uint = 5277;
pub const Iop_NegF64: ::libc::c_uint = 5278;
pub const Iop_AbsF64: ::libc::c_uint = 5279;
pub const Iop_NegF32: ::libc::c_uint = 5280;
pub const Iop_AbsF32: ::libc::c_uint = 5281;
pub const Iop_SqrtF64: ::libc::c_uint = 5282;
pub const Iop_SqrtF32: ::libc::c_uint = 5283;
pub const Iop_CmpF64: ::libc::c_uint = 5284;
pub const Iop_CmpF32: ::libc::c_uint = 5285;
pub const Iop_CmpF128: ::libc::c_uint = 5286;
pub const Iop_F64toI16S: ::libc::c_uint = 5287;
pub const Iop_F64toI32S: ::libc::c_uint = 5288;
pub const Iop_F64toI64S: ::libc::c_uint = 5289;
pub const Iop_F64toI64U: ::libc::c_uint = 5290;
pub const Iop_F64toI32U: ::libc::c_uint = 5291;
pub const Iop_I32StoF64: ::libc::c_uint = 5292;
pub const Iop_I64StoF64: ::libc::c_uint = 5293;
pub const Iop_I64UtoF64: ::libc::c_uint = 5294;
pub const Iop_I64UtoF32: ::libc::c_uint = 5295;
pub const Iop_I32UtoF32: ::libc::c_uint = 5296;
pub const Iop_I32UtoF64: ::libc::c_uint = 5297;
pub const Iop_F32toI32S: ::libc::c_uint = 5298;
pub const Iop_F32toI64S: ::libc::c_uint = 5299;
pub const Iop_F32toI32U: ::libc::c_uint = 5300;
pub const Iop_F32toI64U: ::libc::c_uint = 5301;
pub const Iop_I32StoF32: ::libc::c_uint = 5302;
pub const Iop_I64StoF32: ::libc::c_uint = 5303;
pub const Iop_F32toF64: ::libc::c_uint = 5304;
pub const Iop_F64toF32: ::libc::c_uint = 5305;
pub const Iop_ReinterpF64asI64: ::libc::c_uint = 5306;
pub const Iop_ReinterpI64asF64: ::libc::c_uint = 5307;
pub const Iop_ReinterpF32asI32: ::libc::c_uint = 5308;
pub const Iop_ReinterpI32asF32: ::libc::c_uint = 5309;
pub const Iop_F64HLtoF128: ::libc::c_uint = 5310;
pub const Iop_F128HItoF64: ::libc::c_uint = 5311;
pub const Iop_F128LOtoF64: ::libc::c_uint = 5312;
pub const Iop_AddF128: ::libc::c_uint = 5313;
pub const Iop_SubF128: ::libc::c_uint = 5314;
pub const Iop_MulF128: ::libc::c_uint = 5315;
pub const Iop_DivF128: ::libc::c_uint = 5316;
pub const Iop_NegF128: ::libc::c_uint = 5317;
pub const Iop_AbsF128: ::libc::c_uint = 5318;
pub const Iop_SqrtF128: ::libc::c_uint = 5319;
pub const Iop_I32StoF128: ::libc::c_uint = 5320;
pub const Iop_I64StoF128: ::libc::c_uint = 5321;
pub const Iop_I32UtoF128: ::libc::c_uint = 5322;
pub const Iop_I64UtoF128: ::libc::c_uint = 5323;
pub const Iop_F32toF128: ::libc::c_uint = 5324;
pub const Iop_F64toF128: ::libc::c_uint = 5325;
pub const Iop_F128toI32S: ::libc::c_uint = 5326;
pub const Iop_F128toI64S: ::libc::c_uint = 5327;
pub const Iop_F128toI32U: ::libc::c_uint = 5328;
pub const Iop_F128toI64U: ::libc::c_uint = 5329;
pub const Iop_F128toF64: ::libc::c_uint = 5330;
pub const Iop_F128toF32: ::libc::c_uint = 5331;
pub const Iop_AtanF64: ::libc::c_uint = 5332;
pub const Iop_Yl2xF64: ::libc::c_uint = 5333;
pub const Iop_Yl2xp1F64: ::libc::c_uint = 5334;
pub const Iop_PRemF64: ::libc::c_uint = 5335;
pub const Iop_PRemC3210F64: ::libc::c_uint = 5336;
pub const Iop_PRem1F64: ::libc::c_uint = 5337;
pub const Iop_PRem1C3210F64: ::libc::c_uint = 5338;
pub const Iop_ScaleF64: ::libc::c_uint = 5339;
pub const Iop_SinF64: ::libc::c_uint = 5340;
pub const Iop_CosF64: ::libc::c_uint = 5341;
pub const Iop_TanF64: ::libc::c_uint = 5342;
pub const Iop_2xm1F64: ::libc::c_uint = 5343;
pub const Iop_RoundF64toInt: ::libc::c_uint = 5344;
pub const Iop_RoundF32toInt: ::libc::c_uint = 5345;
pub const Iop_MAddF32: ::libc::c_uint = 5346;
pub const Iop_MSubF32: ::libc::c_uint = 5347;
pub const Iop_MAddF64: ::libc::c_uint = 5348;
pub const Iop_MSubF64: ::libc::c_uint = 5349;
pub const Iop_MAddF64r32: ::libc::c_uint = 5350;
pub const Iop_MSubF64r32: ::libc::c_uint = 5351;
pub const Iop_RSqrtEst5GoodF64: ::libc::c_uint = 5352;
pub const Iop_RoundF64toF64_NEAREST: ::libc::c_uint = 5353;
pub const Iop_RoundF64toF64_NegINF: ::libc::c_uint = 5354;
pub const Iop_RoundF64toF64_PosINF: ::libc::c_uint = 5355;
pub const Iop_RoundF64toF64_ZERO: ::libc::c_uint = 5356;
pub const Iop_TruncF64asF32: ::libc::c_uint = 5357;
pub const Iop_RoundF64toF32: ::libc::c_uint = 5358;
pub const Iop_QAdd32S: ::libc::c_uint = 5359;
pub const Iop_QSub32S: ::libc::c_uint = 5360;
pub const Iop_Add16x2: ::libc::c_uint = 5361;
pub const Iop_Sub16x2: ::libc::c_uint = 5362;
pub const Iop_QAdd16Sx2: ::libc::c_uint = 5363;
pub const Iop_QAdd16Ux2: ::libc::c_uint = 5364;
pub const Iop_QSub16Sx2: ::libc::c_uint = 5365;
pub const Iop_QSub16Ux2: ::libc::c_uint = 5366;
pub const Iop_HAdd16Ux2: ::libc::c_uint = 5367;
pub const Iop_HAdd16Sx2: ::libc::c_uint = 5368;
pub const Iop_HSub16Ux2: ::libc::c_uint = 5369;
pub const Iop_HSub16Sx2: ::libc::c_uint = 5370;
pub const Iop_Add8x4: ::libc::c_uint = 5371;
pub const Iop_Sub8x4: ::libc::c_uint = 5372;
pub const Iop_QAdd8Sx4: ::libc::c_uint = 5373;
pub const Iop_QAdd8Ux4: ::libc::c_uint = 5374;
pub const Iop_QSub8Sx4: ::libc::c_uint = 5375;
pub const Iop_QSub8Ux4: ::libc::c_uint = 5376;
pub const Iop_HAdd8Ux4: ::libc::c_uint = 5377;
pub const Iop_HAdd8Sx4: ::libc::c_uint = 5378;
pub const Iop_HSub8Ux4: ::libc::c_uint = 5379;
pub const Iop_HSub8Sx4: ::libc::c_uint = 5380;
pub const Iop_Sad8Ux4: ::libc::c_uint = 5381;
pub const Iop_CmpNEZ16x2: ::libc::c_uint = 5382;
pub const Iop_CmpNEZ8x4: ::libc::c_uint = 5383;
pub const Iop_I32UtoFx2: ::libc::c_uint = 5384;
pub const Iop_I32StoFx2: ::libc::c_uint = 5385;
pub const Iop_FtoI32Ux2_RZ: ::libc::c_uint = 5386;
pub const Iop_FtoI32Sx2_RZ: ::libc::c_uint = 5387;
pub const Iop_F32ToFixed32Ux2_RZ: ::libc::c_uint = 5388;
pub const Iop_F32ToFixed32Sx2_RZ: ::libc::c_uint = 5389;
pub const Iop_Fixed32UToF32x2_RN: ::libc::c_uint = 5390;
pub const Iop_Fixed32SToF32x2_RN: ::libc::c_uint = 5391;
pub const Iop_Max32Fx2: ::libc::c_uint = 5392;
pub const Iop_Min32Fx2: ::libc::c_uint = 5393;
pub const Iop_PwMax32Fx2: ::libc::c_uint = 5394;
pub const Iop_PwMin32Fx2: ::libc::c_uint = 5395;
pub const Iop_CmpEQ32Fx2: ::libc::c_uint = 5396;
pub const Iop_CmpGT32Fx2: ::libc::c_uint = 5397;
pub const Iop_CmpGE32Fx2: ::libc::c_uint = 5398;
pub const Iop_RecipEst32Fx2: ::libc::c_uint = 5399;
pub const Iop_RecipStep32Fx2: ::libc::c_uint = 5400;
pub const Iop_RSqrtEst32Fx2: ::libc::c_uint = 5401;
pub const Iop_RSqrtStep32Fx2: ::libc::c_uint = 5402;
pub const Iop_Neg32Fx2: ::libc::c_uint = 5403;
pub const Iop_Abs32Fx2: ::libc::c_uint = 5404;
pub const Iop_CmpNEZ8x8: ::libc::c_uint = 5405;
pub const Iop_CmpNEZ16x4: ::libc::c_uint = 5406;
pub const Iop_CmpNEZ32x2: ::libc::c_uint = 5407;
pub const Iop_Add8x8: ::libc::c_uint = 5408;
pub const Iop_Add16x4: ::libc::c_uint = 5409;
pub const Iop_Add32x2: ::libc::c_uint = 5410;
pub const Iop_QAdd8Ux8: ::libc::c_uint = 5411;
pub const Iop_QAdd16Ux4: ::libc::c_uint = 5412;
pub const Iop_QAdd32Ux2: ::libc::c_uint = 5413;
pub const Iop_QAdd64Ux1: ::libc::c_uint = 5414;
pub const Iop_QAdd8Sx8: ::libc::c_uint = 5415;
pub const Iop_QAdd16Sx4: ::libc::c_uint = 5416;
pub const Iop_QAdd32Sx2: ::libc::c_uint = 5417;
pub const Iop_QAdd64Sx1: ::libc::c_uint = 5418;
pub const Iop_PwAdd8x8: ::libc::c_uint = 5419;
pub const Iop_PwAdd16x4: ::libc::c_uint = 5420;
pub const Iop_PwAdd32x2: ::libc::c_uint = 5421;
pub const Iop_PwMax8Sx8: ::libc::c_uint = 5422;
pub const Iop_PwMax16Sx4: ::libc::c_uint = 5423;
pub const Iop_PwMax32Sx2: ::libc::c_uint = 5424;
pub const Iop_PwMax8Ux8: ::libc::c_uint = 5425;
pub const Iop_PwMax16Ux4: ::libc::c_uint = 5426;
pub const Iop_PwMax32Ux2: ::libc::c_uint = 5427;
pub const Iop_PwMin8Sx8: ::libc::c_uint = 5428;
pub const Iop_PwMin16Sx4: ::libc::c_uint = 5429;
pub const Iop_PwMin32Sx2: ::libc::c_uint = 5430;
pub const Iop_PwMin8Ux8: ::libc::c_uint = 5431;
pub const Iop_PwMin16Ux4: ::libc::c_uint = 5432;
pub const Iop_PwMin32Ux2: ::libc::c_uint = 5433;
pub const Iop_PwAddL8Ux8: ::libc::c_uint = 5434;
pub const Iop_PwAddL16Ux4: ::libc::c_uint = 5435;
pub const Iop_PwAddL32Ux2: ::libc::c_uint = 5436;
pub const Iop_PwAddL8Sx8: ::libc::c_uint = 5437;
pub const Iop_PwAddL16Sx4: ::libc::c_uint = 5438;
pub const Iop_PwAddL32Sx2: ::libc::c_uint = 5439;
pub const Iop_Sub8x8: ::libc::c_uint = 5440;
pub const Iop_Sub16x4: ::libc::c_uint = 5441;
pub const Iop_Sub32x2: ::libc::c_uint = 5442;
pub const Iop_QSub8Ux8: ::libc::c_uint = 5443;
pub const Iop_QSub16Ux4: ::libc::c_uint = 5444;
pub const Iop_QSub32Ux2: ::libc::c_uint = 5445;
pub const Iop_QSub64Ux1: ::libc::c_uint = 5446;
pub const Iop_QSub8Sx8: ::libc::c_uint = 5447;
pub const Iop_QSub16Sx4: ::libc::c_uint = 5448;
pub const Iop_QSub32Sx2: ::libc::c_uint = 5449;
pub const Iop_QSub64Sx1: ::libc::c_uint = 5450;
pub const Iop_Abs8x8: ::libc::c_uint = 5451;
pub const Iop_Abs16x4: ::libc::c_uint = 5452;
pub const Iop_Abs32x2: ::libc::c_uint = 5453;
pub const Iop_Mul8x8: ::libc::c_uint = 5454;
pub const Iop_Mul16x4: ::libc::c_uint = 5455;
pub const Iop_Mul32x2: ::libc::c_uint = 5456;
pub const Iop_Mul32Fx2: ::libc::c_uint = 5457;
pub const Iop_MulHi16Ux4: ::libc::c_uint = 5458;
pub const Iop_MulHi16Sx4: ::libc::c_uint = 5459;
pub const Iop_PolynomialMul8x8: ::libc::c_uint = 5460;
pub const Iop_QDMulHi16Sx4: ::libc::c_uint = 5461;
pub const Iop_QDMulHi32Sx2: ::libc::c_uint = 5462;
pub const Iop_QRDMulHi16Sx4: ::libc::c_uint = 5463;
pub const Iop_QRDMulHi32Sx2: ::libc::c_uint = 5464;
pub const Iop_Avg8Ux8: ::libc::c_uint = 5465;
pub const Iop_Avg16Ux4: ::libc::c_uint = 5466;
pub const Iop_Max8Sx8: ::libc::c_uint = 5467;
pub const Iop_Max16Sx4: ::libc::c_uint = 5468;
pub const Iop_Max32Sx2: ::libc::c_uint = 5469;
pub const Iop_Max8Ux8: ::libc::c_uint = 5470;
pub const Iop_Max16Ux4: ::libc::c_uint = 5471;
pub const Iop_Max32Ux2: ::libc::c_uint = 5472;
pub const Iop_Min8Sx8: ::libc::c_uint = 5473;
pub const Iop_Min16Sx4: ::libc::c_uint = 5474;
pub const Iop_Min32Sx2: ::libc::c_uint = 5475;
pub const Iop_Min8Ux8: ::libc::c_uint = 5476;
pub const Iop_Min16Ux4: ::libc::c_uint = 5477;
pub const Iop_Min32Ux2: ::libc::c_uint = 5478;
pub const Iop_CmpEQ8x8: ::libc::c_uint = 5479;
pub const Iop_CmpEQ16x4: ::libc::c_uint = 5480;
pub const Iop_CmpEQ32x2: ::libc::c_uint = 5481;
pub const Iop_CmpGT8Ux8: ::libc::c_uint = 5482;
pub const Iop_CmpGT16Ux4: ::libc::c_uint = 5483;
pub const Iop_CmpGT32Ux2: ::libc::c_uint = 5484;
pub const Iop_CmpGT8Sx8: ::libc::c_uint = 5485;
pub const Iop_CmpGT16Sx4: ::libc::c_uint = 5486;
pub const Iop_CmpGT32Sx2: ::libc::c_uint = 5487;
pub const Iop_Cnt8x8: ::libc::c_uint = 5488;
pub const Iop_Clz8x8: ::libc::c_uint = 5489;
pub const Iop_Clz16x4: ::libc::c_uint = 5490;
pub const Iop_Clz32x2: ::libc::c_uint = 5491;
pub const Iop_Cls8x8: ::libc::c_uint = 5492;
pub const Iop_Cls16x4: ::libc::c_uint = 5493;
pub const Iop_Cls32x2: ::libc::c_uint = 5494;
pub const Iop_Clz64x2: ::libc::c_uint = 5495;
pub const Iop_Shl8x8: ::libc::c_uint = 5496;
pub const Iop_Shl16x4: ::libc::c_uint = 5497;
pub const Iop_Shl32x2: ::libc::c_uint = 5498;
pub const Iop_Shr8x8: ::libc::c_uint = 5499;
pub const Iop_Shr16x4: ::libc::c_uint = 5500;
pub const Iop_Shr32x2: ::libc::c_uint = 5501;
pub const Iop_Sar8x8: ::libc::c_uint = 5502;
pub const Iop_Sar16x4: ::libc::c_uint = 5503;
pub const Iop_Sar32x2: ::libc::c_uint = 5504;
pub const Iop_Sal8x8: ::libc::c_uint = 5505;
pub const Iop_Sal16x4: ::libc::c_uint = 5506;
pub const Iop_Sal32x2: ::libc::c_uint = 5507;
pub const Iop_Sal64x1: ::libc::c_uint = 5508;
pub const Iop_ShlN8x8: ::libc::c_uint = 5509;
pub const Iop_ShlN16x4: ::libc::c_uint = 5510;
pub const Iop_ShlN32x2: ::libc::c_uint = 5511;
pub const Iop_ShrN8x8: ::libc::c_uint = 5512;
pub const Iop_ShrN16x4: ::libc::c_uint = 5513;
pub const Iop_ShrN32x2: ::libc::c_uint = 5514;
pub const Iop_SarN8x8: ::libc::c_uint = 5515;
pub const Iop_SarN16x4: ::libc::c_uint = 5516;
pub const Iop_SarN32x2: ::libc::c_uint = 5517;
pub const Iop_QShl8x8: ::libc::c_uint = 5518;
pub const Iop_QShl16x4: ::libc::c_uint = 5519;
pub const Iop_QShl32x2: ::libc::c_uint = 5520;
pub const Iop_QShl64x1: ::libc::c_uint = 5521;
pub const Iop_QSal8x8: ::libc::c_uint = 5522;
pub const Iop_QSal16x4: ::libc::c_uint = 5523;
pub const Iop_QSal32x2: ::libc::c_uint = 5524;
pub const Iop_QSal64x1: ::libc::c_uint = 5525;
pub const Iop_QShlNsatSU8x8: ::libc::c_uint = 5526;
pub const Iop_QShlNsatSU16x4: ::libc::c_uint = 5527;
pub const Iop_QShlNsatSU32x2: ::libc::c_uint = 5528;
pub const Iop_QShlNsatSU64x1: ::libc::c_uint = 5529;
pub const Iop_QShlNsatUU8x8: ::libc::c_uint = 5530;
pub const Iop_QShlNsatUU16x4: ::libc::c_uint = 5531;
pub const Iop_QShlNsatUU32x2: ::libc::c_uint = 5532;
pub const Iop_QShlNsatUU64x1: ::libc::c_uint = 5533;
pub const Iop_QShlNsatSS8x8: ::libc::c_uint = 5534;
pub const Iop_QShlNsatSS16x4: ::libc::c_uint = 5535;
pub const Iop_QShlNsatSS32x2: ::libc::c_uint = 5536;
pub const Iop_QShlNsatSS64x1: ::libc::c_uint = 5537;
pub const Iop_QNarrowBin16Sto8Ux8: ::libc::c_uint = 5538;
pub const Iop_QNarrowBin16Sto8Sx8: ::libc::c_uint = 5539;
pub const Iop_QNarrowBin32Sto16Sx4: ::libc::c_uint = 5540;
pub const Iop_NarrowBin16to8x8: ::libc::c_uint = 5541;
pub const Iop_NarrowBin32to16x4: ::libc::c_uint = 5542;
pub const Iop_InterleaveHI8x8: ::libc::c_uint = 5543;
pub const Iop_InterleaveHI16x4: ::libc::c_uint = 5544;
pub const Iop_InterleaveHI32x2: ::libc::c_uint = 5545;
pub const Iop_InterleaveLO8x8: ::libc::c_uint = 5546;
pub const Iop_InterleaveLO16x4: ::libc::c_uint = 5547;
pub const Iop_InterleaveLO32x2: ::libc::c_uint = 5548;
pub const Iop_InterleaveOddLanes8x8: ::libc::c_uint = 5549;
pub const Iop_InterleaveEvenLanes8x8: ::libc::c_uint = 5550;
pub const Iop_InterleaveOddLanes16x4: ::libc::c_uint = 5551;
pub const Iop_InterleaveEvenLanes16x4: ::libc::c_uint = 5552;
pub const Iop_CatOddLanes8x8: ::libc::c_uint = 5553;
pub const Iop_CatOddLanes16x4: ::libc::c_uint = 5554;
pub const Iop_CatEvenLanes8x8: ::libc::c_uint = 5555;
pub const Iop_CatEvenLanes16x4: ::libc::c_uint = 5556;
pub const Iop_GetElem8x8: ::libc::c_uint = 5557;
pub const Iop_GetElem16x4: ::libc::c_uint = 5558;
pub const Iop_GetElem32x2: ::libc::c_uint = 5559;
pub const Iop_SetElem8x8: ::libc::c_uint = 5560;
pub const Iop_SetElem16x4: ::libc::c_uint = 5561;
pub const Iop_SetElem32x2: ::libc::c_uint = 5562;
pub const Iop_Dup8x8: ::libc::c_uint = 5563;
pub const Iop_Dup16x4: ::libc::c_uint = 5564;
pub const Iop_Dup32x2: ::libc::c_uint = 5565;
pub const Iop_Slice64: ::libc::c_uint = 5566;
pub const Iop_Reverse8sIn16_x4: ::libc::c_uint = 5567;
pub const Iop_Reverse8sIn32_x2: ::libc::c_uint = 5568;
pub const Iop_Reverse16sIn32_x2: ::libc::c_uint = 5569;
pub const Iop_Reverse8sIn64_x1: ::libc::c_uint = 5570;
pub const Iop_Reverse16sIn64_x1: ::libc::c_uint = 5571;
pub const Iop_Reverse32sIn64_x1: ::libc::c_uint = 5572;
pub const Iop_Perm8x8: ::libc::c_uint = 5573;
pub const Iop_GetMSBs8x8: ::libc::c_uint = 5574;
pub const Iop_RecipEst32Ux2: ::libc::c_uint = 5575;
pub const Iop_RSqrtEst32Ux2: ::libc::c_uint = 5576;
pub const Iop_AddD64: ::libc::c_uint = 5577;
pub const Iop_SubD64: ::libc::c_uint = 5578;
pub const Iop_MulD64: ::libc::c_uint = 5579;
pub const Iop_DivD64: ::libc::c_uint = 5580;
pub const Iop_AddD128: ::libc::c_uint = 5581;
pub const Iop_SubD128: ::libc::c_uint = 5582;
pub const Iop_MulD128: ::libc::c_uint = 5583;
pub const Iop_DivD128: ::libc::c_uint = 5584;
pub const Iop_ShlD64: ::libc::c_uint = 5585;
pub const Iop_ShrD64: ::libc::c_uint = 5586;
pub const Iop_ShlD128: ::libc::c_uint = 5587;
pub const Iop_ShrD128: ::libc::c_uint = 5588;
pub const Iop_D32toD64: ::libc::c_uint = 5589;
pub const Iop_D64toD128: ::libc::c_uint = 5590;
pub const Iop_I32StoD128: ::libc::c_uint = 5591;
pub const Iop_I32UtoD128: ::libc::c_uint = 5592;
pub const Iop_I64StoD128: ::libc::c_uint = 5593;
pub const Iop_I64UtoD128: ::libc::c_uint = 5594;
pub const Iop_D64toD32: ::libc::c_uint = 5595;
pub const Iop_D128toD64: ::libc::c_uint = 5596;
pub const Iop_I32StoD64: ::libc::c_uint = 5597;
pub const Iop_I32UtoD64: ::libc::c_uint = 5598;
pub const Iop_I64StoD64: ::libc::c_uint = 5599;
pub const Iop_I64UtoD64: ::libc::c_uint = 5600;
pub const Iop_D64toI32S: ::libc::c_uint = 5601;
pub const Iop_D64toI32U: ::libc::c_uint = 5602;
pub const Iop_D64toI64S: ::libc::c_uint = 5603;
pub const Iop_D64toI64U: ::libc::c_uint = 5604;
pub const Iop_D128toI32S: ::libc::c_uint = 5605;
pub const Iop_D128toI32U: ::libc::c_uint = 5606;
pub const Iop_D128toI64S: ::libc::c_uint = 5607;
pub const Iop_D128toI64U: ::libc::c_uint = 5608;
pub const Iop_F32toD32: ::libc::c_uint = 5609;
pub const Iop_F32toD64: ::libc::c_uint = 5610;
pub const Iop_F32toD128: ::libc::c_uint = 5611;
pub const Iop_F64toD32: ::libc::c_uint = 5612;
pub const Iop_F64toD64: ::libc::c_uint = 5613;
pub const Iop_F64toD128: ::libc::c_uint = 5614;
pub const Iop_F128toD32: ::libc::c_uint = 5615;
pub const Iop_F128toD64: ::libc::c_uint = 5616;
pub const Iop_F128toD128: ::libc::c_uint = 5617;
pub const Iop_D32toF32: ::libc::c_uint = 5618;
pub const Iop_D32toF64: ::libc::c_uint = 5619;
pub const Iop_D32toF128: ::libc::c_uint = 5620;
pub const Iop_D64toF32: ::libc::c_uint = 5621;
pub const Iop_D64toF64: ::libc::c_uint = 5622;
pub const Iop_D64toF128: ::libc::c_uint = 5623;
pub const Iop_D128toF32: ::libc::c_uint = 5624;
pub const Iop_D128toF64: ::libc::c_uint = 5625;
pub const Iop_D128toF128: ::libc::c_uint = 5626;
pub const Iop_RoundD64toInt: ::libc::c_uint = 5627;
pub const Iop_RoundD128toInt: ::libc::c_uint = 5628;
pub const Iop_CmpD64: ::libc::c_uint = 5629;
pub const Iop_CmpD128: ::libc::c_uint = 5630;
pub const Iop_CmpExpD64: ::libc::c_uint = 5631;
pub const Iop_CmpExpD128: ::libc::c_uint = 5632;
pub const Iop_QuantizeD64: ::libc::c_uint = 5633;
pub const Iop_QuantizeD128: ::libc::c_uint = 5634;
pub const Iop_SignificanceRoundD64: ::libc::c_uint = 5635;
pub const Iop_SignificanceRoundD128: ::libc::c_uint = 5636;
pub const Iop_ExtractExpD64: ::libc::c_uint = 5637;
pub const Iop_ExtractExpD128: ::libc::c_uint = 5638;
pub const Iop_ExtractSigD64: ::libc::c_uint = 5639;
pub const Iop_ExtractSigD128: ::libc::c_uint = 5640;
pub const Iop_InsertExpD64: ::libc::c_uint = 5641;
pub const Iop_InsertExpD128: ::libc::c_uint = 5642;
pub const Iop_D64HLtoD128: ::libc::c_uint = 5643;
pub const Iop_D128HItoD64: ::libc::c_uint = 5644;
pub const Iop_D128LOtoD64: ::libc::c_uint = 5645;
pub const Iop_DPBtoBCD: ::libc::c_uint = 5646;
pub const Iop_BCDtoDPB: ::libc::c_uint = 5647;
pub const Iop_BCDAdd: ::libc::c_uint = 5648;
pub const Iop_BCDSub: ::libc::c_uint = 5649;
pub const Iop_ReinterpI64asD64: ::libc::c_uint = 5650;
pub const Iop_ReinterpD64asI64: ::libc::c_uint = 5651;
pub const Iop_Add32Fx4: ::libc::c_uint = 5652;
pub const Iop_Sub32Fx4: ::libc::c_uint = 5653;
pub const Iop_Mul32Fx4: ::libc::c_uint = 5654;
pub const Iop_Div32Fx4: ::libc::c_uint = 5655;
pub const Iop_Max32Fx4: ::libc::c_uint = 5656;
pub const Iop_Min32Fx4: ::libc::c_uint = 5657;
pub const Iop_Add32Fx2: ::libc::c_uint = 5658;
pub const Iop_Sub32Fx2: ::libc::c_uint = 5659;
pub const Iop_CmpEQ32Fx4: ::libc::c_uint = 5660;
pub const Iop_CmpLT32Fx4: ::libc::c_uint = 5661;
pub const Iop_CmpLE32Fx4: ::libc::c_uint = 5662;
pub const Iop_CmpUN32Fx4: ::libc::c_uint = 5663;
pub const Iop_CmpGT32Fx4: ::libc::c_uint = 5664;
pub const Iop_CmpGE32Fx4: ::libc::c_uint = 5665;
pub const Iop_PwMax32Fx4: ::libc::c_uint = 5666;
pub const Iop_PwMin32Fx4: ::libc::c_uint = 5667;
pub const Iop_Abs32Fx4: ::libc::c_uint = 5668;
pub const Iop_Sqrt32Fx4: ::libc::c_uint = 5669;
pub const Iop_Neg32Fx4: ::libc::c_uint = 5670;
pub const Iop_RecipEst32Fx4: ::libc::c_uint = 5671;
pub const Iop_RecipStep32Fx4: ::libc::c_uint = 5672;
pub const Iop_RSqrtEst32Fx4: ::libc::c_uint = 5673;
pub const Iop_RSqrtStep32Fx4: ::libc::c_uint = 5674;
pub const Iop_I32UtoFx4: ::libc::c_uint = 5675;
pub const Iop_I32StoFx4: ::libc::c_uint = 5676;
pub const Iop_FtoI32Ux4_RZ: ::libc::c_uint = 5677;
pub const Iop_FtoI32Sx4_RZ: ::libc::c_uint = 5678;
pub const Iop_QFtoI32Ux4_RZ: ::libc::c_uint = 5679;
pub const Iop_QFtoI32Sx4_RZ: ::libc::c_uint = 5680;
pub const Iop_RoundF32x4_RM: ::libc::c_uint = 5681;
pub const Iop_RoundF32x4_RP: ::libc::c_uint = 5682;
pub const Iop_RoundF32x4_RN: ::libc::c_uint = 5683;
pub const Iop_RoundF32x4_RZ: ::libc::c_uint = 5684;
pub const Iop_F32ToFixed32Ux4_RZ: ::libc::c_uint = 5685;
pub const Iop_F32ToFixed32Sx4_RZ: ::libc::c_uint = 5686;
pub const Iop_Fixed32UToF32x4_RN: ::libc::c_uint = 5687;
pub const Iop_Fixed32SToF32x4_RN: ::libc::c_uint = 5688;
pub const Iop_F32toF16x4: ::libc::c_uint = 5689;
pub const Iop_F16toF32x4: ::libc::c_uint = 5690;
pub const Iop_Add32F0x4: ::libc::c_uint = 5691;
pub const Iop_Sub32F0x4: ::libc::c_uint = 5692;
pub const Iop_Mul32F0x4: ::libc::c_uint = 5693;
pub const Iop_Div32F0x4: ::libc::c_uint = 5694;
pub const Iop_Max32F0x4: ::libc::c_uint = 5695;
pub const Iop_Min32F0x4: ::libc::c_uint = 5696;
pub const Iop_CmpEQ32F0x4: ::libc::c_uint = 5697;
pub const Iop_CmpLT32F0x4: ::libc::c_uint = 5698;
pub const Iop_CmpLE32F0x4: ::libc::c_uint = 5699;
pub const Iop_CmpUN32F0x4: ::libc::c_uint = 5700;
pub const Iop_RecipEst32F0x4: ::libc::c_uint = 5701;
pub const Iop_Sqrt32F0x4: ::libc::c_uint = 5702;
pub const Iop_RSqrtEst32F0x4: ::libc::c_uint = 5703;
pub const Iop_Add64Fx2: ::libc::c_uint = 5704;
pub const Iop_Sub64Fx2: ::libc::c_uint = 5705;
pub const Iop_Mul64Fx2: ::libc::c_uint = 5706;
pub const Iop_Div64Fx2: ::libc::c_uint = 5707;
pub const Iop_Max64Fx2: ::libc::c_uint = 5708;
pub const Iop_Min64Fx2: ::libc::c_uint = 5709;
pub const Iop_CmpEQ64Fx2: ::libc::c_uint = 5710;
pub const Iop_CmpLT64Fx2: ::libc::c_uint = 5711;
pub const Iop_CmpLE64Fx2: ::libc::c_uint = 5712;
pub const Iop_CmpUN64Fx2: ::libc::c_uint = 5713;
pub const Iop_Abs64Fx2: ::libc::c_uint = 5714;
pub const Iop_Sqrt64Fx2: ::libc::c_uint = 5715;
pub const Iop_Neg64Fx2: ::libc::c_uint = 5716;
pub const Iop_Add64F0x2: ::libc::c_uint = 5717;
pub const Iop_Sub64F0x2: ::libc::c_uint = 5718;
pub const Iop_Mul64F0x2: ::libc::c_uint = 5719;
pub const Iop_Div64F0x2: ::libc::c_uint = 5720;
pub const Iop_Max64F0x2: ::libc::c_uint = 5721;
pub const Iop_Min64F0x2: ::libc::c_uint = 5722;
pub const Iop_CmpEQ64F0x2: ::libc::c_uint = 5723;
pub const Iop_CmpLT64F0x2: ::libc::c_uint = 5724;
pub const Iop_CmpLE64F0x2: ::libc::c_uint = 5725;
pub const Iop_CmpUN64F0x2: ::libc::c_uint = 5726;
pub const Iop_Sqrt64F0x2: ::libc::c_uint = 5727;
pub const Iop_V128to64: ::libc::c_uint = 5728;
pub const Iop_V128HIto64: ::libc::c_uint = 5729;
pub const Iop_64HLtoV128: ::libc::c_uint = 5730;
pub const Iop_64UtoV128: ::libc::c_uint = 5731;
pub const Iop_SetV128lo64: ::libc::c_uint = 5732;
pub const Iop_ZeroHI64ofV128: ::libc::c_uint = 5733;
pub const Iop_ZeroHI96ofV128: ::libc::c_uint = 5734;
pub const Iop_ZeroHI112ofV128: ::libc::c_uint = 5735;
pub const Iop_ZeroHI120ofV128: ::libc::c_uint = 5736;
pub const Iop_32UtoV128: ::libc::c_uint = 5737;
pub const Iop_V128to32: ::libc::c_uint = 5738;
pub const Iop_SetV128lo32: ::libc::c_uint = 5739;
pub const Iop_NotV128: ::libc::c_uint = 5740;
pub const Iop_AndV128: ::libc::c_uint = 5741;
pub const Iop_OrV128: ::libc::c_uint = 5742;
pub const Iop_XorV128: ::libc::c_uint = 5743;
pub const Iop_ShlV128: ::libc::c_uint = 5744;
pub const Iop_ShrV128: ::libc::c_uint = 5745;
pub const Iop_CmpNEZ8x16: ::libc::c_uint = 5746;
pub const Iop_CmpNEZ16x8: ::libc::c_uint = 5747;
pub const Iop_CmpNEZ32x4: ::libc::c_uint = 5748;
pub const Iop_CmpNEZ64x2: ::libc::c_uint = 5749;
pub const Iop_Add8x16: ::libc::c_uint = 5750;
pub const Iop_Add16x8: ::libc::c_uint = 5751;
pub const Iop_Add32x4: ::libc::c_uint = 5752;
pub const Iop_Add64x2: ::libc::c_uint = 5753;
pub const Iop_QAdd8Ux16: ::libc::c_uint = 5754;
pub const Iop_QAdd16Ux8: ::libc::c_uint = 5755;
pub const Iop_QAdd32Ux4: ::libc::c_uint = 5756;
pub const Iop_QAdd64Ux2: ::libc::c_uint = 5757;
pub const Iop_QAdd8Sx16: ::libc::c_uint = 5758;
pub const Iop_QAdd16Sx8: ::libc::c_uint = 5759;
pub const Iop_QAdd32Sx4: ::libc::c_uint = 5760;
pub const Iop_QAdd64Sx2: ::libc::c_uint = 5761;
pub const Iop_QAddExtUSsatSS8x16: ::libc::c_uint = 5762;
pub const Iop_QAddExtUSsatSS16x8: ::libc::c_uint = 5763;
pub const Iop_QAddExtUSsatSS32x4: ::libc::c_uint = 5764;
pub const Iop_QAddExtUSsatSS64x2: ::libc::c_uint = 5765;
pub const Iop_QAddExtSUsatUU8x16: ::libc::c_uint = 5766;
pub const Iop_QAddExtSUsatUU16x8: ::libc::c_uint = 5767;
pub const Iop_QAddExtSUsatUU32x4: ::libc::c_uint = 5768;
pub const Iop_QAddExtSUsatUU64x2: ::libc::c_uint = 5769;
pub const Iop_Sub8x16: ::libc::c_uint = 5770;
pub const Iop_Sub16x8: ::libc::c_uint = 5771;
pub const Iop_Sub32x4: ::libc::c_uint = 5772;
pub const Iop_Sub64x2: ::libc::c_uint = 5773;
pub const Iop_QSub8Ux16: ::libc::c_uint = 5774;
pub const Iop_QSub16Ux8: ::libc::c_uint = 5775;
pub const Iop_QSub32Ux4: ::libc::c_uint = 5776;
pub const Iop_QSub64Ux2: ::libc::c_uint = 5777;
pub const Iop_QSub8Sx16: ::libc::c_uint = 5778;
pub const Iop_QSub16Sx8: ::libc::c_uint = 5779;
pub const Iop_QSub32Sx4: ::libc::c_uint = 5780;
pub const Iop_QSub64Sx2: ::libc::c_uint = 5781;
pub const Iop_Mul8x16: ::libc::c_uint = 5782;
pub const Iop_Mul16x8: ::libc::c_uint = 5783;
pub const Iop_Mul32x4: ::libc::c_uint = 5784;
pub const Iop_MulHi16Ux8: ::libc::c_uint = 5785;
pub const Iop_MulHi32Ux4: ::libc::c_uint = 5786;
pub const Iop_MulHi16Sx8: ::libc::c_uint = 5787;
pub const Iop_MulHi32Sx4: ::libc::c_uint = 5788;
pub const Iop_MullEven8Ux16: ::libc::c_uint = 5789;
pub const Iop_MullEven16Ux8: ::libc::c_uint = 5790;
pub const Iop_MullEven32Ux4: ::libc::c_uint = 5791;
pub const Iop_MullEven8Sx16: ::libc::c_uint = 5792;
pub const Iop_MullEven16Sx8: ::libc::c_uint = 5793;
pub const Iop_MullEven32Sx4: ::libc::c_uint = 5794;
pub const Iop_Mull8Ux8: ::libc::c_uint = 5795;
pub const Iop_Mull8Sx8: ::libc::c_uint = 5796;
pub const Iop_Mull16Ux4: ::libc::c_uint = 5797;
pub const Iop_Mull16Sx4: ::libc::c_uint = 5798;
pub const Iop_Mull32Ux2: ::libc::c_uint = 5799;
pub const Iop_Mull32Sx2: ::libc::c_uint = 5800;
pub const Iop_QDMull16Sx4: ::libc::c_uint = 5801;
pub const Iop_QDMull32Sx2: ::libc::c_uint = 5802;
pub const Iop_QDMulHi16Sx8: ::libc::c_uint = 5803;
pub const Iop_QDMulHi32Sx4: ::libc::c_uint = 5804;
pub const Iop_QRDMulHi16Sx8: ::libc::c_uint = 5805;
pub const Iop_QRDMulHi32Sx4: ::libc::c_uint = 5806;
pub const Iop_PolynomialMul8x16: ::libc::c_uint = 5807;
pub const Iop_PolynomialMull8x8: ::libc::c_uint = 5808;
pub const Iop_PolynomialMulAdd8x16: ::libc::c_uint = 5809;
pub const Iop_PolynomialMulAdd16x8: ::libc::c_uint = 5810;
pub const Iop_PolynomialMulAdd32x4: ::libc::c_uint = 5811;
pub const Iop_PolynomialMulAdd64x2: ::libc::c_uint = 5812;
pub const Iop_PwAdd8x16: ::libc::c_uint = 5813;
pub const Iop_PwAdd16x8: ::libc::c_uint = 5814;
pub const Iop_PwAdd32x4: ::libc::c_uint = 5815;
pub const Iop_PwAdd32Fx2: ::libc::c_uint = 5816;
pub const Iop_PwAddL8Ux16: ::libc::c_uint = 5817;
pub const Iop_PwAddL16Ux8: ::libc::c_uint = 5818;
pub const Iop_PwAddL32Ux4: ::libc::c_uint = 5819;
pub const Iop_PwAddL8Sx16: ::libc::c_uint = 5820;
pub const Iop_PwAddL16Sx8: ::libc::c_uint = 5821;
pub const Iop_PwAddL32Sx4: ::libc::c_uint = 5822;
pub const Iop_PwBitMtxXpose64x2: ::libc::c_uint = 5823;
pub const Iop_Abs8x16: ::libc::c_uint = 5824;
pub const Iop_Abs16x8: ::libc::c_uint = 5825;
pub const Iop_Abs32x4: ::libc::c_uint = 5826;
pub const Iop_Abs64x2: ::libc::c_uint = 5827;
pub const Iop_Avg8Ux16: ::libc::c_uint = 5828;
pub const Iop_Avg16Ux8: ::libc::c_uint = 5829;
pub const Iop_Avg32Ux4: ::libc::c_uint = 5830;
pub const Iop_Avg8Sx16: ::libc::c_uint = 5831;
pub const Iop_Avg16Sx8: ::libc::c_uint = 5832;
pub const Iop_Avg32Sx4: ::libc::c_uint = 5833;
pub const Iop_Max8Sx16: ::libc::c_uint = 5834;
pub const Iop_Max16Sx8: ::libc::c_uint = 5835;
pub const Iop_Max32Sx4: ::libc::c_uint = 5836;
pub const Iop_Max64Sx2: ::libc::c_uint = 5837;
pub const Iop_Max8Ux16: ::libc::c_uint = 5838;
pub const Iop_Max16Ux8: ::libc::c_uint = 5839;
pub const Iop_Max32Ux4: ::libc::c_uint = 5840;
pub const Iop_Max64Ux2: ::libc::c_uint = 5841;
pub const Iop_Min8Sx16: ::libc::c_uint = 5842;
pub const Iop_Min16Sx8: ::libc::c_uint = 5843;
pub const Iop_Min32Sx4: ::libc::c_uint = 5844;
pub const Iop_Min64Sx2: ::libc::c_uint = 5845;
pub const Iop_Min8Ux16: ::libc::c_uint = 5846;
pub const Iop_Min16Ux8: ::libc::c_uint = 5847;
pub const Iop_Min32Ux4: ::libc::c_uint = 5848;
pub const Iop_Min64Ux2: ::libc::c_uint = 5849;
pub const Iop_CmpEQ8x16: ::libc::c_uint = 5850;
pub const Iop_CmpEQ16x8: ::libc::c_uint = 5851;
pub const Iop_CmpEQ32x4: ::libc::c_uint = 5852;
pub const Iop_CmpEQ64x2: ::libc::c_uint = 5853;
pub const Iop_CmpGT8Sx16: ::libc::c_uint = 5854;
pub const Iop_CmpGT16Sx8: ::libc::c_uint = 5855;
pub const Iop_CmpGT32Sx4: ::libc::c_uint = 5856;
pub const Iop_CmpGT64Sx2: ::libc::c_uint = 5857;
pub const Iop_CmpGT8Ux16: ::libc::c_uint = 5858;
pub const Iop_CmpGT16Ux8: ::libc::c_uint = 5859;
pub const Iop_CmpGT32Ux4: ::libc::c_uint = 5860;
pub const Iop_CmpGT64Ux2: ::libc::c_uint = 5861;
pub const Iop_Cnt8x16: ::libc::c_uint = 5862;
pub const Iop_Clz8x16: ::libc::c_uint = 5863;
pub const Iop_Clz16x8: ::libc::c_uint = 5864;
pub const Iop_Clz32x4: ::libc::c_uint = 5865;
pub const Iop_Cls8x16: ::libc::c_uint = 5866;
pub const Iop_Cls16x8: ::libc::c_uint = 5867;
pub const Iop_Cls32x4: ::libc::c_uint = 5868;
pub const Iop_ShlN8x16: ::libc::c_uint = 5869;
pub const Iop_ShlN16x8: ::libc::c_uint = 5870;
pub const Iop_ShlN32x4: ::libc::c_uint = 5871;
pub const Iop_ShlN64x2: ::libc::c_uint = 5872;
pub const Iop_ShrN8x16: ::libc::c_uint = 5873;
pub const Iop_ShrN16x8: ::libc::c_uint = 5874;
pub const Iop_ShrN32x4: ::libc::c_uint = 5875;
pub const Iop_ShrN64x2: ::libc::c_uint = 5876;
pub const Iop_SarN8x16: ::libc::c_uint = 5877;
pub const Iop_SarN16x8: ::libc::c_uint = 5878;
pub const Iop_SarN32x4: ::libc::c_uint = 5879;
pub const Iop_SarN64x2: ::libc::c_uint = 5880;
pub const Iop_Shl8x16: ::libc::c_uint = 5881;
pub const Iop_Shl16x8: ::libc::c_uint = 5882;
pub const Iop_Shl32x4: ::libc::c_uint = 5883;
pub const Iop_Shl64x2: ::libc::c_uint = 5884;
pub const Iop_Shr8x16: ::libc::c_uint = 5885;
pub const Iop_Shr16x8: ::libc::c_uint = 5886;
pub const Iop_Shr32x4: ::libc::c_uint = 5887;
pub const Iop_Shr64x2: ::libc::c_uint = 5888;
pub const Iop_Sar8x16: ::libc::c_uint = 5889;
pub const Iop_Sar16x8: ::libc::c_uint = 5890;
pub const Iop_Sar32x4: ::libc::c_uint = 5891;
pub const Iop_Sar64x2: ::libc::c_uint = 5892;
pub const Iop_Sal8x16: ::libc::c_uint = 5893;
pub const Iop_Sal16x8: ::libc::c_uint = 5894;
pub const Iop_Sal32x4: ::libc::c_uint = 5895;
pub const Iop_Sal64x2: ::libc::c_uint = 5896;
pub const Iop_Rol8x16: ::libc::c_uint = 5897;
pub const Iop_Rol16x8: ::libc::c_uint = 5898;
pub const Iop_Rol32x4: ::libc::c_uint = 5899;
pub const Iop_Rol64x2: ::libc::c_uint = 5900;
pub const Iop_QShl8x16: ::libc::c_uint = 5901;
pub const Iop_QShl16x8: ::libc::c_uint = 5902;
pub const Iop_QShl32x4: ::libc::c_uint = 5903;
pub const Iop_QShl64x2: ::libc::c_uint = 5904;
pub const Iop_QSal8x16: ::libc::c_uint = 5905;
pub const Iop_QSal16x8: ::libc::c_uint = 5906;
pub const Iop_QSal32x4: ::libc::c_uint = 5907;
pub const Iop_QSal64x2: ::libc::c_uint = 5908;
pub const Iop_QShlNsatSU8x16: ::libc::c_uint = 5909;
pub const Iop_QShlNsatSU16x8: ::libc::c_uint = 5910;
pub const Iop_QShlNsatSU32x4: ::libc::c_uint = 5911;
pub const Iop_QShlNsatSU64x2: ::libc::c_uint = 5912;
pub const Iop_QShlNsatUU8x16: ::libc::c_uint = 5913;
pub const Iop_QShlNsatUU16x8: ::libc::c_uint = 5914;
pub const Iop_QShlNsatUU32x4: ::libc::c_uint = 5915;
pub const Iop_QShlNsatUU64x2: ::libc::c_uint = 5916;
pub const Iop_QShlNsatSS8x16: ::libc::c_uint = 5917;
pub const Iop_QShlNsatSS16x8: ::libc::c_uint = 5918;
pub const Iop_QShlNsatSS32x4: ::libc::c_uint = 5919;
pub const Iop_QShlNsatSS64x2: ::libc::c_uint = 5920;
pub const Iop_QandUQsh8x16: ::libc::c_uint = 5921;
pub const Iop_QandUQsh16x8: ::libc::c_uint = 5922;
pub const Iop_QandUQsh32x4: ::libc::c_uint = 5923;
pub const Iop_QandUQsh64x2: ::libc::c_uint = 5924;
pub const Iop_QandSQsh8x16: ::libc::c_uint = 5925;
pub const Iop_QandSQsh16x8: ::libc::c_uint = 5926;
pub const Iop_QandSQsh32x4: ::libc::c_uint = 5927;
pub const Iop_QandSQsh64x2: ::libc::c_uint = 5928;
pub const Iop_QandUQRsh8x16: ::libc::c_uint = 5929;
pub const Iop_QandUQRsh16x8: ::libc::c_uint = 5930;
pub const Iop_QandUQRsh32x4: ::libc::c_uint = 5931;
pub const Iop_QandUQRsh64x2: ::libc::c_uint = 5932;
pub const Iop_QandSQRsh8x16: ::libc::c_uint = 5933;
pub const Iop_QandSQRsh16x8: ::libc::c_uint = 5934;
pub const Iop_QandSQRsh32x4: ::libc::c_uint = 5935;
pub const Iop_QandSQRsh64x2: ::libc::c_uint = 5936;
pub const Iop_Sh8Sx16: ::libc::c_uint = 5937;
pub const Iop_Sh16Sx8: ::libc::c_uint = 5938;
pub const Iop_Sh32Sx4: ::libc::c_uint = 5939;
pub const Iop_Sh64Sx2: ::libc::c_uint = 5940;
pub const Iop_Sh8Ux16: ::libc::c_uint = 5941;
pub const Iop_Sh16Ux8: ::libc::c_uint = 5942;
pub const Iop_Sh32Ux4: ::libc::c_uint = 5943;
pub const Iop_Sh64Ux2: ::libc::c_uint = 5944;
pub const Iop_Rsh8Sx16: ::libc::c_uint = 5945;
pub const Iop_Rsh16Sx8: ::libc::c_uint = 5946;
pub const Iop_Rsh32Sx4: ::libc::c_uint = 5947;
pub const Iop_Rsh64Sx2: ::libc::c_uint = 5948;
pub const Iop_Rsh8Ux16: ::libc::c_uint = 5949;
pub const Iop_Rsh16Ux8: ::libc::c_uint = 5950;
pub const Iop_Rsh32Ux4: ::libc::c_uint = 5951;
pub const Iop_Rsh64Ux2: ::libc::c_uint = 5952;
pub const Iop_QandQShrNnarrow16Uto8Ux8: ::libc::c_uint = 5953;
pub const Iop_QandQShrNnarrow32Uto16Ux4: ::libc::c_uint = 5954;
pub const Iop_QandQShrNnarrow64Uto32Ux2: ::libc::c_uint = 5955;
pub const Iop_QandQSarNnarrow16Sto8Sx8: ::libc::c_uint = 5956;
pub const Iop_QandQSarNnarrow32Sto16Sx4: ::libc::c_uint = 5957;
pub const Iop_QandQSarNnarrow64Sto32Sx2: ::libc::c_uint = 5958;
pub const Iop_QandQSarNnarrow16Sto8Ux8: ::libc::c_uint = 5959;
pub const Iop_QandQSarNnarrow32Sto16Ux4: ::libc::c_uint = 5960;
pub const Iop_QandQSarNnarrow64Sto32Ux2: ::libc::c_uint = 5961;
pub const Iop_QandQRShrNnarrow16Uto8Ux8: ::libc::c_uint = 5962;
pub const Iop_QandQRShrNnarrow32Uto16Ux4: ::libc::c_uint = 5963;
pub const Iop_QandQRShrNnarrow64Uto32Ux2: ::libc::c_uint = 5964;
pub const Iop_QandQRSarNnarrow16Sto8Sx8: ::libc::c_uint = 5965;
pub const Iop_QandQRSarNnarrow32Sto16Sx4: ::libc::c_uint = 5966;
pub const Iop_QandQRSarNnarrow64Sto32Sx2: ::libc::c_uint = 5967;
pub const Iop_QandQRSarNnarrow16Sto8Ux8: ::libc::c_uint = 5968;
pub const Iop_QandQRSarNnarrow32Sto16Ux4: ::libc::c_uint = 5969;
pub const Iop_QandQRSarNnarrow64Sto32Ux2: ::libc::c_uint = 5970;
pub const Iop_QNarrowBin16Sto8Ux16: ::libc::c_uint = 5971;
pub const Iop_QNarrowBin32Sto16Ux8: ::libc::c_uint = 5972;
pub const Iop_QNarrowBin16Sto8Sx16: ::libc::c_uint = 5973;
pub const Iop_QNarrowBin32Sto16Sx8: ::libc::c_uint = 5974;
pub const Iop_QNarrowBin16Uto8Ux16: ::libc::c_uint = 5975;
pub const Iop_QNarrowBin32Uto16Ux8: ::libc::c_uint = 5976;
pub const Iop_NarrowBin16to8x16: ::libc::c_uint = 5977;
pub const Iop_NarrowBin32to16x8: ::libc::c_uint = 5978;
pub const Iop_QNarrowBin64Sto32Sx4: ::libc::c_uint = 5979;
pub const Iop_QNarrowBin64Uto32Ux4: ::libc::c_uint = 5980;
pub const Iop_NarrowBin64to32x4: ::libc::c_uint = 5981;
pub const Iop_NarrowUn16to8x8: ::libc::c_uint = 5982;
pub const Iop_NarrowUn32to16x4: ::libc::c_uint = 5983;
pub const Iop_NarrowUn64to32x2: ::libc::c_uint = 5984;
pub const Iop_QNarrowUn16Sto8Sx8: ::libc::c_uint = 5985;
pub const Iop_QNarrowUn32Sto16Sx4: ::libc::c_uint = 5986;
pub const Iop_QNarrowUn64Sto32Sx2: ::libc::c_uint = 5987;
pub const Iop_QNarrowUn16Sto8Ux8: ::libc::c_uint = 5988;
pub const Iop_QNarrowUn32Sto16Ux4: ::libc::c_uint = 5989;
pub const Iop_QNarrowUn64Sto32Ux2: ::libc::c_uint = 5990;
pub const Iop_QNarrowUn16Uto8Ux8: ::libc::c_uint = 5991;
pub const Iop_QNarrowUn32Uto16Ux4: ::libc::c_uint = 5992;
pub const Iop_QNarrowUn64Uto32Ux2: ::libc::c_uint = 5993;
pub const Iop_Widen8Uto16x8: ::libc::c_uint = 5994;
pub const Iop_Widen16Uto32x4: ::libc::c_uint = 5995;
pub const Iop_Widen32Uto64x2: ::libc::c_uint = 5996;
pub const Iop_Widen8Sto16x8: ::libc::c_uint = 5997;
pub const Iop_Widen16Sto32x4: ::libc::c_uint = 5998;
pub const Iop_Widen32Sto64x2: ::libc::c_uint = 5999;
pub const Iop_InterleaveHI8x16: ::libc::c_uint = 6000;
pub const Iop_InterleaveHI16x8: ::libc::c_uint = 6001;
pub const Iop_InterleaveHI32x4: ::libc::c_uint = 6002;
pub const Iop_InterleaveHI64x2: ::libc::c_uint = 6003;
pub const Iop_InterleaveLO8x16: ::libc::c_uint = 6004;
pub const Iop_InterleaveLO16x8: ::libc::c_uint = 6005;
pub const Iop_InterleaveLO32x4: ::libc::c_uint = 6006;
pub const Iop_InterleaveLO64x2: ::libc::c_uint = 6007;
pub const Iop_InterleaveOddLanes8x16: ::libc::c_uint = 6008;
pub const Iop_InterleaveEvenLanes8x16: ::libc::c_uint = 6009;
pub const Iop_InterleaveOddLanes16x8: ::libc::c_uint = 6010;
pub const Iop_InterleaveEvenLanes16x8: ::libc::c_uint = 6011;
pub const Iop_InterleaveOddLanes32x4: ::libc::c_uint = 6012;
pub const Iop_InterleaveEvenLanes32x4: ::libc::c_uint = 6013;
pub const Iop_CatOddLanes8x16: ::libc::c_uint = 6014;
pub const Iop_CatOddLanes16x8: ::libc::c_uint = 6015;
pub const Iop_CatOddLanes32x4: ::libc::c_uint = 6016;
pub const Iop_CatEvenLanes8x16: ::libc::c_uint = 6017;
pub const Iop_CatEvenLanes16x8: ::libc::c_uint = 6018;
pub const Iop_CatEvenLanes32x4: ::libc::c_uint = 6019;
pub const Iop_GetElem8x16: ::libc::c_uint = 6020;
pub const Iop_GetElem16x8: ::libc::c_uint = 6021;
pub const Iop_GetElem32x4: ::libc::c_uint = 6022;
pub const Iop_GetElem64x2: ::libc::c_uint = 6023;
pub const Iop_Dup8x16: ::libc::c_uint = 6024;
pub const Iop_Dup16x8: ::libc::c_uint = 6025;
pub const Iop_Dup32x4: ::libc::c_uint = 6026;
pub const Iop_SliceV128: ::libc::c_uint = 6027;
pub const Iop_Reverse8sIn16_x8: ::libc::c_uint = 6028;
pub const Iop_Reverse8sIn32_x4: ::libc::c_uint = 6029;
pub const Iop_Reverse16sIn32_x4: ::libc::c_uint = 6030;
pub const Iop_Reverse8sIn64_x2: ::libc::c_uint = 6031;
pub const Iop_Reverse16sIn64_x2: ::libc::c_uint = 6032;
pub const Iop_Reverse32sIn64_x2: ::libc::c_uint = 6033;
pub const Iop_Reverse1sIn8_x16: ::libc::c_uint = 6034;
pub const Iop_Perm8x16: ::libc::c_uint = 6035;
pub const Iop_Perm32x4: ::libc::c_uint = 6036;
pub const Iop_GetMSBs8x16: ::libc::c_uint = 6037;
pub const Iop_RecipEst32Ux4: ::libc::c_uint = 6038;
pub const Iop_RSqrtEst32Ux4: ::libc::c_uint = 6039;
pub const Iop_V256to64_0: ::libc::c_uint = 6040;
pub const Iop_V256to64_1: ::libc::c_uint = 6041;
pub const Iop_V256to64_2: ::libc::c_uint = 6042;
pub const Iop_V256to64_3: ::libc::c_uint = 6043;
pub const Iop_64x4toV256: ::libc::c_uint = 6044;
pub const Iop_V256toV128_0: ::libc::c_uint = 6045;
pub const Iop_V256toV128_1: ::libc::c_uint = 6046;
pub const Iop_V128HLtoV256: ::libc::c_uint = 6047;
pub const Iop_AndV256: ::libc::c_uint = 6048;
pub const Iop_OrV256: ::libc::c_uint = 6049;
pub const Iop_XorV256: ::libc::c_uint = 6050;
pub const Iop_NotV256: ::libc::c_uint = 6051;
pub const Iop_CmpNEZ8x32: ::libc::c_uint = 6052;
pub const Iop_CmpNEZ16x16: ::libc::c_uint = 6053;
pub const Iop_CmpNEZ32x8: ::libc::c_uint = 6054;
pub const Iop_CmpNEZ64x4: ::libc::c_uint = 6055;
pub const Iop_Add8x32: ::libc::c_uint = 6056;
pub const Iop_Add16x16: ::libc::c_uint = 6057;
pub const Iop_Add32x8: ::libc::c_uint = 6058;
pub const Iop_Add64x4: ::libc::c_uint = 6059;
pub const Iop_Sub8x32: ::libc::c_uint = 6060;
pub const Iop_Sub16x16: ::libc::c_uint = 6061;
pub const Iop_Sub32x8: ::libc::c_uint = 6062;
pub const Iop_Sub64x4: ::libc::c_uint = 6063;
pub const Iop_CmpEQ8x32: ::libc::c_uint = 6064;
pub const Iop_CmpEQ16x16: ::libc::c_uint = 6065;
pub const Iop_CmpEQ32x8: ::libc::c_uint = 6066;
pub const Iop_CmpEQ64x4: ::libc::c_uint = 6067;
pub const Iop_CmpGT8Sx32: ::libc::c_uint = 6068;
pub const Iop_CmpGT16Sx16: ::libc::c_uint = 6069;
pub const Iop_CmpGT32Sx8: ::libc::c_uint = 6070;
pub const Iop_CmpGT64Sx4: ::libc::c_uint = 6071;
pub const Iop_ShlN16x16: ::libc::c_uint = 6072;
pub const Iop_ShlN32x8: ::libc::c_uint = 6073;
pub const Iop_ShlN64x4: ::libc::c_uint = 6074;
pub const Iop_ShrN16x16: ::libc::c_uint = 6075;
pub const Iop_ShrN32x8: ::libc::c_uint = 6076;
pub const Iop_ShrN64x4: ::libc::c_uint = 6077;
pub const Iop_SarN16x16: ::libc::c_uint = 6078;
pub const Iop_SarN32x8: ::libc::c_uint = 6079;
pub const Iop_Max8Sx32: ::libc::c_uint = 6080;
pub const Iop_Max16Sx16: ::libc::c_uint = 6081;
pub const Iop_Max32Sx8: ::libc::c_uint = 6082;
pub const Iop_Max8Ux32: ::libc::c_uint = 6083;
pub const Iop_Max16Ux16: ::libc::c_uint = 6084;
pub const Iop_Max32Ux8: ::libc::c_uint = 6085;
pub const Iop_Min8Sx32: ::libc::c_uint = 6086;
pub const Iop_Min16Sx16: ::libc::c_uint = 6087;
pub const Iop_Min32Sx8: ::libc::c_uint = 6088;
pub const Iop_Min8Ux32: ::libc::c_uint = 6089;
pub const Iop_Min16Ux16: ::libc::c_uint = 6090;
pub const Iop_Min32Ux8: ::libc::c_uint = 6091;
pub const Iop_Mul16x16: ::libc::c_uint = 6092;
pub const Iop_Mul32x8: ::libc::c_uint = 6093;
pub const Iop_MulHi16Ux16: ::libc::c_uint = 6094;
pub const Iop_MulHi16Sx16: ::libc::c_uint = 6095;
pub const Iop_QAdd8Ux32: ::libc::c_uint = 6096;
pub const Iop_QAdd16Ux16: ::libc::c_uint = 6097;
pub const Iop_QAdd8Sx32: ::libc::c_uint = 6098;
pub const Iop_QAdd16Sx16: ::libc::c_uint = 6099;
pub const Iop_QSub8Ux32: ::libc::c_uint = 6100;
pub const Iop_QSub16Ux16: ::libc::c_uint = 6101;
pub const Iop_QSub8Sx32: ::libc::c_uint = 6102;
pub const Iop_QSub16Sx16: ::libc::c_uint = 6103;
pub const Iop_Avg8Ux32: ::libc::c_uint = 6104;
pub const Iop_Avg16Ux16: ::libc::c_uint = 6105;
pub const Iop_Perm32x8: ::libc::c_uint = 6106;
pub const Iop_CipherV128: ::libc::c_uint = 6107;
pub const Iop_CipherLV128: ::libc::c_uint = 6108;
pub const Iop_CipherSV128: ::libc::c_uint = 6109;
pub const Iop_NCipherV128: ::libc::c_uint = 6110;
pub const Iop_NCipherLV128: ::libc::c_uint = 6111;
pub const Iop_SHA512: ::libc::c_uint = 6112;
pub const Iop_SHA256: ::libc::c_uint = 6113;
pub const Iop_Add64Fx4: ::libc::c_uint = 6114;
pub const Iop_Sub64Fx4: ::libc::c_uint = 6115;
pub const Iop_Mul64Fx4: ::libc::c_uint = 6116;
pub const Iop_Div64Fx4: ::libc::c_uint = 6117;
pub const Iop_Add32Fx8: ::libc::c_uint = 6118;
pub const Iop_Sub32Fx8: ::libc::c_uint = 6119;
pub const Iop_Mul32Fx8: ::libc::c_uint = 6120;
pub const Iop_Div32Fx8: ::libc::c_uint = 6121;
pub const Iop_Sqrt32Fx8: ::libc::c_uint = 6122;
pub const Iop_Sqrt64Fx4: ::libc::c_uint = 6123;
pub const Iop_RSqrtEst32Fx8: ::libc::c_uint = 6124;
pub const Iop_RecipEst32Fx8: ::libc::c_uint = 6125;
pub const Iop_Max32Fx8: ::libc::c_uint = 6126;
pub const Iop_Min32Fx8: ::libc::c_uint = 6127;
pub const Iop_Max64Fx4: ::libc::c_uint = 6128;
pub const Iop_Min64Fx4: ::libc::c_uint = 6129;
pub const Iop_LAST: ::libc::c_uint = 6130;
pub type IRRoundingMode = ::libc::c_uint;
pub const Irrm_NEAREST: ::libc::c_uint = 0;
pub const Irrm_NegINF: ::libc::c_uint = 1;
pub const Irrm_PosINF: ::libc::c_uint = 2;
pub const Irrm_ZERO: ::libc::c_uint = 3;
pub const Irrm_NEAREST_TIE_AWAY_0: ::libc::c_uint = 4;
pub const Irrm_PREPARE_SHORTER: ::libc::c_uint = 5;
pub const Irrm_AWAY_FROM_ZERO: ::libc::c_uint = 6;
pub const Irrm_NEAREST_TIE_TOWARD_0: ::libc::c_uint = 7;
pub type IRCmpFResult = ::libc::c_uint;
pub const Ircr_UN: ::libc::c_uint = 69;
pub const Ircr_LT: ::libc::c_uint = 1;
pub const Ircr_GT: ::libc::c_uint = 0;
pub const Ircr_EQ: ::libc::c_uint = 64;
pub type IRCmpF32Result = IRCmpFResult;
pub type IRCmpF64Result = IRCmpFResult;
pub type IRCmpF128Result = IRCmpFResult;
pub type IRCmpDResult = IRCmpFResult;
pub type IRCmpD64Result = IRCmpDResult;
pub type IRCmpD128Result = IRCmpDResult;
pub type IRExprTag = ::libc::c_uint;
pub const Iex_Binder: ::libc::c_uint = 6400;
pub const Iex_Get: ::libc::c_uint = 6401;
pub const Iex_GetI: ::libc::c_uint = 6402;
pub const Iex_RdTmp: ::libc::c_uint = 6403;
pub const Iex_Qop: ::libc::c_uint = 6404;
pub const Iex_Triop: ::libc::c_uint = 6405;
pub const Iex_Binop: ::libc::c_uint = 6406;
pub const Iex_Unop: ::libc::c_uint = 6407;
pub const Iex_Load: ::libc::c_uint = 6408;
pub const Iex_Const: ::libc::c_uint = 6409;
pub const Iex_ITE: ::libc::c_uint = 6410;
pub const Iex_CCall: ::libc::c_uint = 6411;
pub const Iex_VECRET: ::libc::c_uint = 6412;
pub const Iex_BBPTR: ::libc::c_uint = 6413;
#[repr(C)]
#[derive(Copy)]
pub struct IRExpr {
    pub tag: IRExprTag,
    pub Iex: Iex,
}
impl ::std::clone::Clone for IRExpr {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for IRExpr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Iex {
    pub _bindgen_data_: [u64; 3usize],
}
impl Iex {
    pub unsafe fn Binder(&mut self) -> *mut Iex_S_Binder {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Get(&mut self) -> *mut Iex_S_Get {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn GetI(&mut self) -> *mut Iex_S_GetI {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn RdTmp(&mut self) -> *mut Iex_S_RdTmp {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Qop(&mut self) -> *mut Iex_S_Qop {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Triop(&mut self) -> *mut Iex_S_Triop {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Binop(&mut self) -> *mut Iex_S_Binop {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Unop(&mut self) -> *mut Iex_S_Unop {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Load(&mut self) -> *mut Iex_S_Load {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Const(&mut self) -> *mut Iex_S_Const {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn CCall(&mut self) -> *mut Iex_S_CCall {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ITE(&mut self) -> *mut Iex_S_ITE {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Iex {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Iex {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Iex_S_Binder {
    pub binder: Int,
}
impl ::std::clone::Clone for Iex_S_Binder {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Iex_S_Binder {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Iex_S_Get {
    pub offset: Int,
    pub ty: IRType,
}
impl ::std::clone::Clone for Iex_S_Get {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Iex_S_Get {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Iex_S_GetI {
    pub descr: *mut IRRegArray,
    pub ix: *mut IRExpr,
    pub bias: Int,
}
impl ::std::clone::Clone for Iex_S_GetI {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Iex_S_GetI {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Iex_S_RdTmp {
    pub tmp: IRTemp,
}
impl ::std::clone::Clone for Iex_S_RdTmp {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Iex_S_RdTmp {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Iex_S_Qop {
    pub details: *mut IRQop,
}
impl ::std::clone::Clone for Iex_S_Qop {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Iex_S_Qop {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Iex_S_Triop {
    pub details: *mut IRTriop,
}
impl ::std::clone::Clone for Iex_S_Triop {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Iex_S_Triop {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Iex_S_Binop {
    pub op: IROp,
    pub arg1: *mut IRExpr,
    pub arg2: *mut IRExpr,
}
impl ::std::clone::Clone for Iex_S_Binop {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Iex_S_Binop {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Iex_S_Unop {
    pub op: IROp,
    pub arg: *mut IRExpr,
}
impl ::std::clone::Clone for Iex_S_Unop {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Iex_S_Unop {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Iex_S_Load {
    pub end: IREndness,
    pub ty: IRType,
    pub addr: *mut IRExpr,
}
impl ::std::clone::Clone for Iex_S_Load {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Iex_S_Load {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Iex_S_Const {
    pub con: *mut IRConst,
}
impl ::std::clone::Clone for Iex_S_Const {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Iex_S_Const {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Iex_S_CCall {
    pub cee: *mut IRCallee,
    pub retty: IRType,
    pub args: *mut *mut IRExpr,
}
impl ::std::clone::Clone for Iex_S_CCall {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Iex_S_CCall {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Iex_S_ITE {
    pub cond: *mut IRExpr,
    pub iftrue: *mut IRExpr,
    pub iffalse: *mut IRExpr,
}
impl ::std::clone::Clone for Iex_S_ITE {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Iex_S_ITE {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct IRTriop {
    pub op: IROp,
    pub arg1: *mut IRExpr,
    pub arg2: *mut IRExpr,
    pub arg3: *mut IRExpr,
}
impl ::std::clone::Clone for IRTriop {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for IRTriop {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct IRQop {
    pub op: IROp,
    pub arg1: *mut IRExpr,
    pub arg2: *mut IRExpr,
    pub arg3: *mut IRExpr,
    pub arg4: *mut IRExpr,
}
impl ::std::clone::Clone for IRQop {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for IRQop {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type IRJumpKind = ::libc::c_uint;
pub const Ijk_INVALID: ::libc::c_uint = 6656;
pub const Ijk_Boring: ::libc::c_uint = 6657;
pub const Ijk_Call: ::libc::c_uint = 6658;
pub const Ijk_Ret: ::libc::c_uint = 6659;
pub const Ijk_ClientReq: ::libc::c_uint = 6660;
pub const Ijk_Yield: ::libc::c_uint = 6661;
pub const Ijk_EmWarn: ::libc::c_uint = 6662;
pub const Ijk_EmFail: ::libc::c_uint = 6663;
pub const Ijk_NoDecode: ::libc::c_uint = 6664;
pub const Ijk_MapFail: ::libc::c_uint = 6665;
pub const Ijk_InvalICache: ::libc::c_uint = 6666;
pub const Ijk_FlushDCache: ::libc::c_uint = 6667;
pub const Ijk_NoRedir: ::libc::c_uint = 6668;
pub const Ijk_SigILL: ::libc::c_uint = 6669;
pub const Ijk_SigTRAP: ::libc::c_uint = 6670;
pub const Ijk_SigSEGV: ::libc::c_uint = 6671;
pub const Ijk_SigBUS: ::libc::c_uint = 6672;
pub const Ijk_SigFPE_IntDiv: ::libc::c_uint = 6673;
pub const Ijk_SigFPE_IntOvf: ::libc::c_uint = 6674;
pub const Ijk_Sys_syscall: ::libc::c_uint = 6675;
pub const Ijk_Sys_int32: ::libc::c_uint = 6676;
pub const Ijk_Sys_int128: ::libc::c_uint = 6677;
pub const Ijk_Sys_int129: ::libc::c_uint = 6678;
pub const Ijk_Sys_int130: ::libc::c_uint = 6679;
pub const Ijk_Sys_sysenter: ::libc::c_uint = 6680;
pub type IREffect = ::libc::c_uint;
pub const Ifx_None: ::libc::c_uint = 6912;
pub const Ifx_Read: ::libc::c_uint = 6913;
pub const Ifx_Write: ::libc::c_uint = 6914;
pub const Ifx_Modify: ::libc::c_uint = 6915;
#[repr(C)]
#[derive(Copy)]
pub struct IRDirty {
    pub cee: *mut IRCallee,
    pub guard: *mut IRExpr,
    pub args: *mut *mut IRExpr,
    pub tmp: IRTemp,
    pub mFx: IREffect,
    pub mAddr: *mut IRExpr,
    pub mSize: Int,
    pub nFxState: Int,
    pub fxState: [FxState; 7usize],
}
impl ::std::clone::Clone for IRDirty {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for IRDirty {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct FxState {
    pub fx: u16,
    pub offset: UShort,
    pub size: UShort,
    pub nRepeats: UChar,
    pub repeatLen: UChar,
}
impl ::std::clone::Clone for FxState {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for FxState {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type IRMBusEvent = ::libc::c_uint;
pub const Imbe_Fence: ::libc::c_uint = 7168;
pub const Imbe_CancelReservation: ::libc::c_uint = 7169;
#[repr(C)]
#[derive(Copy)]
pub struct IRCAS {
    pub oldHi: IRTemp,
    pub oldLo: IRTemp,
    pub end: IREndness,
    pub addr: *mut IRExpr,
    pub expdHi: *mut IRExpr,
    pub expdLo: *mut IRExpr,
    pub dataHi: *mut IRExpr,
    pub dataLo: *mut IRExpr,
}
impl ::std::clone::Clone for IRCAS {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for IRCAS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct IRPutI {
    pub descr: *mut IRRegArray,
    pub ix: *mut IRExpr,
    pub bias: Int,
    pub data: *mut IRExpr,
}
impl ::std::clone::Clone for IRPutI {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for IRPutI {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct IRStoreG {
    pub end: IREndness,
    pub addr: *mut IRExpr,
    pub data: *mut IRExpr,
    pub guard: *mut IRExpr,
}
impl ::std::clone::Clone for IRStoreG {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for IRStoreG {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type IRLoadGOp = ::libc::c_uint;
pub const ILGop_INVALID: ::libc::c_uint = 7424;
pub const ILGop_Ident32: ::libc::c_uint = 7425;
pub const ILGop_16Uto32: ::libc::c_uint = 7426;
pub const ILGop_16Sto32: ::libc::c_uint = 7427;
pub const ILGop_8Uto32: ::libc::c_uint = 7428;
pub const ILGop_8Sto32: ::libc::c_uint = 7429;
#[repr(C)]
#[derive(Copy)]
pub struct IRLoadG {
    pub end: IREndness,
    pub cvt: IRLoadGOp,
    pub dst: IRTemp,
    pub addr: *mut IRExpr,
    pub alt: *mut IRExpr,
    pub guard: *mut IRExpr,
}
impl ::std::clone::Clone for IRLoadG {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for IRLoadG {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type IRStmtTag = ::libc::c_uint;
pub const Ist_NoOp: ::libc::c_uint = 7680;
pub const Ist_IMark: ::libc::c_uint = 7681;
pub const Ist_AbiHint: ::libc::c_uint = 7682;
pub const Ist_Put: ::libc::c_uint = 7683;
pub const Ist_PutI: ::libc::c_uint = 7684;
pub const Ist_WrTmp: ::libc::c_uint = 7685;
pub const Ist_Store: ::libc::c_uint = 7686;
pub const Ist_LoadG: ::libc::c_uint = 7687;
pub const Ist_StoreG: ::libc::c_uint = 7688;
pub const Ist_CAS: ::libc::c_uint = 7689;
pub const Ist_LLSC: ::libc::c_uint = 7690;
pub const Ist_Dirty: ::libc::c_uint = 7691;
pub const Ist_MBE: ::libc::c_uint = 7692;
pub const Ist_Exit: ::libc::c_uint = 7693;
#[repr(C)]
#[derive(Copy)]
pub struct IRStmt {
    pub tag: IRStmtTag,
    pub Ist: Ist,
}
impl ::std::clone::Clone for IRStmt {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for IRStmt {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Ist {
    pub _bindgen_data_: [u64; 3usize],
}
impl Ist {
    pub unsafe fn NoOp(&mut self) -> *mut Ist_S_NoOp {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn IMark(&mut self) -> *mut Ist_S_IMark {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn AbiHint(&mut self) -> *mut Ist_S_AbiHint {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Put(&mut self) -> *mut Ist_S_Put {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn PutI(&mut self) -> *mut Ist_S_PutI {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn WrTmp(&mut self) -> *mut Ist_S_WrTmp {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Store(&mut self) -> *mut Ist_S_Store {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn StoreG(&mut self) -> *mut Ist_S_StoreG {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn LoadG(&mut self) -> *mut Ist_S_LoadG {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn CAS(&mut self) -> *mut Ist_S_CAS {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn LLSC(&mut self) -> *mut Ist_S_LLSC {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Dirty(&mut self) -> *mut Ist_S_Dirty {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn MBE(&mut self) -> *mut Ist_S_MBE {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Exit(&mut self) -> *mut Ist_S_Exit {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Ist {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Ist {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Ist_S_NoOp {
}
impl ::std::clone::Clone for Ist_S_NoOp {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Ist_S_NoOp {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Ist_S_IMark {
    pub addr: Addr64,
    pub len: Int,
    pub delta: UChar,
}
impl ::std::clone::Clone for Ist_S_IMark {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Ist_S_IMark {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Ist_S_AbiHint {
    pub base: *mut IRExpr,
    pub len: Int,
    pub nia: *mut IRExpr,
}
impl ::std::clone::Clone for Ist_S_AbiHint {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Ist_S_AbiHint {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Ist_S_Put {
    pub offset: Int,
    pub data: *mut IRExpr,
}
impl ::std::clone::Clone for Ist_S_Put {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Ist_S_Put {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Ist_S_PutI {
    pub details: *mut IRPutI,
}
impl ::std::clone::Clone for Ist_S_PutI {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Ist_S_PutI {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Ist_S_WrTmp {
    pub tmp: IRTemp,
    pub data: *mut IRExpr,
}
impl ::std::clone::Clone for Ist_S_WrTmp {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Ist_S_WrTmp {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Ist_S_Store {
    pub end: IREndness,
    pub addr: *mut IRExpr,
    pub data: *mut IRExpr,
}
impl ::std::clone::Clone for Ist_S_Store {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Ist_S_Store {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Ist_S_StoreG {
    pub details: *mut IRStoreG,
}
impl ::std::clone::Clone for Ist_S_StoreG {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Ist_S_StoreG {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Ist_S_LoadG {
    pub details: *mut IRLoadG,
}
impl ::std::clone::Clone for Ist_S_LoadG {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Ist_S_LoadG {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Ist_S_CAS {
    pub details: *mut IRCAS,
}
impl ::std::clone::Clone for Ist_S_CAS {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Ist_S_CAS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Ist_S_LLSC {
    pub end: IREndness,
    pub result: IRTemp,
    pub addr: *mut IRExpr,
    pub storedata: *mut IRExpr,
}
impl ::std::clone::Clone for Ist_S_LLSC {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Ist_S_LLSC {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Ist_S_Dirty {
    pub details: *mut IRDirty,
}
impl ::std::clone::Clone for Ist_S_Dirty {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Ist_S_Dirty {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Ist_S_MBE {
    pub event: IRMBusEvent,
}
impl ::std::clone::Clone for Ist_S_MBE {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Ist_S_MBE {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Ist_S_Exit {
    pub guard: *mut IRExpr,
    pub dst: *mut IRConst,
    pub jk: IRJumpKind,
    pub offsIP: Int,
}
impl ::std::clone::Clone for Ist_S_Exit {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Ist_S_Exit {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct IRTypeEnv {
    pub types: *mut IRType,
    pub types_size: Int,
    pub types_used: Int,
}
impl ::std::clone::Clone for IRTypeEnv {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for IRTypeEnv {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct IRSB {
    pub tyenv: *mut IRTypeEnv,
    pub stmts: *mut *mut IRStmt,
    pub stmts_size: Int,
    pub stmts_used: Int,
    pub next: *mut IRExpr,
    pub jumpkind: IRJumpKind,
    pub offsIP: Int,
}
impl ::std::clone::Clone for IRSB {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for IRSB {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VexArch = ::libc::c_uint;
pub const VexArch_INVALID: ::libc::c_uint = 1024;
pub const VexArchX86: ::libc::c_uint = 1025;
pub const VexArchAMD64: ::libc::c_uint = 1026;
pub const VexArchARM: ::libc::c_uint = 1027;
pub const VexArchARM64: ::libc::c_uint = 1028;
pub const VexArchPPC32: ::libc::c_uint = 1029;
pub const VexArchPPC64: ::libc::c_uint = 1030;
pub const VexArchS390X: ::libc::c_uint = 1031;
pub const VexArchMIPS32: ::libc::c_uint = 1032;
pub const VexArchMIPS64: ::libc::c_uint = 1033;
pub type VexEndness = ::libc::c_uint;
pub const VexEndness_INVALID: ::libc::c_uint = 1536;
pub const VexEndnessLE: ::libc::c_uint = 1537;
pub const VexEndnessBE: ::libc::c_uint = 1538;
pub type VexCacheKind = ::libc::c_uint;
pub const DATA_CACHE: ::libc::c_uint = 1280;
pub const INSN_CACHE: ::libc::c_uint = 1281;
pub const UNIFIED_CACHE: ::libc::c_uint = 1282;
#[repr(C)]
#[derive(Copy)]
pub struct VexCache {
    pub kind: VexCacheKind,
    pub level: UInt,
    pub sizeB: UInt,
    pub line_sizeB: UInt,
    pub assoc: UInt,
    pub is_trace_cache: Bool,
}
impl ::std::clone::Clone for VexCache {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for VexCache {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct VexCacheInfo {
    pub num_levels: UInt,
    pub num_caches: UInt,
    pub caches: *mut VexCache,
    pub icaches_maintain_coherence: Bool,
}
impl ::std::clone::Clone for VexCacheInfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for VexCacheInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct VexArchInfo {
    pub hwcaps: UInt,
    pub endness: VexEndness,
    pub hwcache_info: VexCacheInfo,
    pub ppc_icache_line_szB: Int,
    pub ppc_dcbz_szB: UInt,
    pub ppc_dcbzl_szB: UInt,
    pub arm64_dMinLine_lg2_szB: UInt,
    pub arm64_iMinLine_lg2_szB: UInt,
}
impl ::std::clone::Clone for VexArchInfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for VexArchInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct VexAbiInfo {
    pub guest_stack_redzone_size: Int,
    pub guest_amd64_assume_fs_is_zero: Bool,
    pub guest_amd64_assume_gs_is_0x60: Bool,
    pub guest_ppc_zap_RZ_at_blr: Bool,
    pub guest_ppc_zap_RZ_at_bl: ::std::option::Option<extern "C" fn(arg1:
                                                                        Addr64)
                                                          -> Bool>,
    pub host_ppc_calls_use_fndescrs: Bool,
}
impl ::std::clone::Clone for VexAbiInfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for VexAbiInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VexRegisterUpdates = ::libc::c_uint;
pub const VexRegUpdSpAtMemAccess: ::libc::c_uint = 1792;
pub const VexRegUpdUnwindregsAtMemAccess: ::libc::c_uint = 1793;
pub const VexRegUpdAllregsAtMemAccess: ::libc::c_uint = 1794;
pub const VexRegUpdAllregsAtEachInsn: ::libc::c_uint = 1795;
#[repr(C)]
#[derive(Copy)]
pub struct VexControl {
    pub iropt_verbosity: Int,
    pub iropt_level: Int,
    pub iropt_register_updates: VexRegisterUpdates,
    pub iropt_unroll_thresh: Int,
    pub guest_max_insns: Int,
    pub guest_chase_thresh: Int,
    pub guest_chase_cond: Bool,
}
impl ::std::clone::Clone for VexControl {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for VexControl {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct VexGuestLayout {
    pub total_sizeB: Int,
    pub offset_SP: Int,
    pub sizeof_SP: Int,
    pub offset_FP: Int,
    pub sizeof_FP: Int,
    pub offset_IP: Int,
    pub sizeof_IP: Int,
    pub n_alwaysDefd: Int,
    pub alwaysDefd: [AlwaysDefd; 24usize],
}
impl ::std::clone::Clone for VexGuestLayout {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for VexGuestLayout {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct AlwaysDefd {
    pub offset: Int,
    pub size: Int,
}
impl ::std::clone::Clone for AlwaysDefd {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for AlwaysDefd {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct VexTranslateResult {
    pub status: u32,
    pub n_sc_extents: UInt,
    pub offs_profInc: Int,
    pub n_guest_instrs: UInt,
}
impl ::std::clone::Clone for VexTranslateResult {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for VexTranslateResult {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct VexGuestExtents {
    pub base: [Addr64; 3usize],
    pub len: [UShort; 3usize],
    pub n_used: UShort,
}
impl ::std::clone::Clone for VexGuestExtents {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for VexGuestExtents {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct VexTranslateArgs {
    pub arch_guest: VexArch,
    pub archinfo_guest: VexArchInfo,
    pub arch_host: VexArch,
    pub archinfo_host: VexArchInfo,
    pub abiinfo_both: VexAbiInfo,
    pub callback_opaque: *mut ::libc::c_void,
    pub guest_bytes: *mut UChar,
    pub guest_bytes_addr: Addr64,
    pub chase_into_ok: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut ::libc::c_void,
                                                                  arg2:
                                                                      Addr64)
                                                 -> Bool>,
    pub guest_extents: *mut VexGuestExtents,
    pub host_bytes: *mut UChar,
    pub host_bytes_size: Int,
    pub host_bytes_used: *mut Int,
    pub instrument1: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                    *mut ::libc::c_void,
                                                                arg2:
                                                                    *mut IRSB,
                                                                arg3:
                                                                    *mut VexGuestLayout,
                                                                arg4:
                                                                    *mut VexGuestExtents,
                                                                arg5:
                                                                    *mut VexArchInfo,
                                                                gWordTy:
                                                                    IRType,
                                                                hWordTy:
                                                                    IRType)
                                               -> *mut IRSB>,
    pub instrument2: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                    *mut ::libc::c_void,
                                                                arg2:
                                                                    *mut IRSB,
                                                                arg3:
                                                                    *mut VexGuestLayout,
                                                                arg4:
                                                                    *mut VexGuestExtents,
                                                                arg5:
                                                                    *mut VexArchInfo,
                                                                gWordTy:
                                                                    IRType,
                                                                hWordTy:
                                                                    IRType)
                                               -> *mut IRSB>,
    pub finaltidy: ::std::option::Option<unsafe extern "C" fn(arg1: *mut IRSB)
                                             -> *mut IRSB>,
    pub needs_self_check: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                         *mut ::libc::c_void,
                                                                     arg2:
                                                                         *mut VexGuestExtents)
                                                    -> UInt>,
    pub preamble_function: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut ::libc::c_void,
                                                                      arg2:
                                                                          *mut IRSB)
                                                     -> Bool>,
    pub traceflags: Int,
    pub sigill_diag: Bool,
    pub addProfInc: Bool,
    pub disp_cp_chain_me_to_slowEP: *mut ::libc::c_void,
    pub disp_cp_chain_me_to_fastEP: *mut ::libc::c_void,
    pub disp_cp_xindir: *mut ::libc::c_void,
    pub disp_cp_xassisted: *mut ::libc::c_void,
}
impl ::std::clone::Clone for VexTranslateArgs {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for VexTranslateArgs {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct VexInvalRange {
    pub start: HWord,
    pub len: HWord,
}
impl ::std::clone::Clone for VexInvalRange {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for VexInvalRange {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct IRICB {
    pub op: IROp,
    pub result: HWord,
    pub opnd1: HWord,
    pub opnd2: HWord,
    pub opnd3: HWord,
    pub opnd4: HWord,
    pub t_result: IRType,
    pub t_opnd1: IRType,
    pub t_opnd2: IRType,
    pub t_opnd3: IRType,
    pub t_opnd4: IRType,
    pub rounding_mode: UInt,
    pub num_operands: UInt,
    pub shift_amount_is_immediate: Bool,
}
impl ::std::clone::Clone for IRICB {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for IRICB {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct VexGuestX86State {
    pub host_EvC_FAILADDR: UInt,
    pub host_EvC_COUNTER: UInt,
    pub guest_EAX: UInt,
    pub guest_ECX: UInt,
    pub guest_EDX: UInt,
    pub guest_EBX: UInt,
    pub guest_ESP: UInt,
    pub guest_EBP: UInt,
    pub guest_ESI: UInt,
    pub guest_EDI: UInt,
    pub guest_CC_OP: UInt,
    pub guest_CC_DEP1: UInt,
    pub guest_CC_DEP2: UInt,
    pub guest_CC_NDEP: UInt,
    pub guest_DFLAG: UInt,
    pub guest_IDFLAG: UInt,
    pub guest_ACFLAG: UInt,
    pub guest_EIP: UInt,
    pub guest_FPREG: [ULong; 8usize],
    pub guest_FPTAG: [UChar; 8usize],
    pub guest_FPROUND: UInt,
    pub guest_FC3210: UInt,
    pub guest_FTOP: UInt,
    pub guest_SSEROUND: UInt,
    pub guest_XMM0: U128,
    pub guest_XMM1: U128,
    pub guest_XMM2: U128,
    pub guest_XMM3: U128,
    pub guest_XMM4: U128,
    pub guest_XMM5: U128,
    pub guest_XMM6: U128,
    pub guest_XMM7: U128,
    pub guest_CS: UShort,
    pub guest_DS: UShort,
    pub guest_ES: UShort,
    pub guest_FS: UShort,
    pub guest_GS: UShort,
    pub guest_SS: UShort,
    pub guest_LDT: HWord,
    pub guest_GDT: HWord,
    pub guest_EMNOTE: UInt,
    pub guest_CMSTART: UInt,
    pub guest_CMLEN: UInt,
    pub guest_NRADDR: UInt,
    pub guest_SC_CLASS: UInt,
    pub guest_IP_AT_SYSCALL: UInt,
    pub padding1: UInt,
}
impl ::std::clone::Clone for VexGuestX86State {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for VexGuestX86State {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct VexGuestAMD64State {
    pub host_EvC_FAILADDR: ULong,
    pub host_EvC_COUNTER: UInt,
    pub pad0: UInt,
    pub guest_RAX: ULong,
    pub guest_RCX: ULong,
    pub guest_RDX: ULong,
    pub guest_RBX: ULong,
    pub guest_RSP: ULong,
    pub guest_RBP: ULong,
    pub guest_RSI: ULong,
    pub guest_RDI: ULong,
    pub guest_R8: ULong,
    pub guest_R9: ULong,
    pub guest_R10: ULong,
    pub guest_R11: ULong,
    pub guest_R12: ULong,
    pub guest_R13: ULong,
    pub guest_R14: ULong,
    pub guest_R15: ULong,
    pub guest_CC_OP: ULong,
    pub guest_CC_DEP1: ULong,
    pub guest_CC_DEP2: ULong,
    pub guest_CC_NDEP: ULong,
    pub guest_DFLAG: ULong,
    pub guest_RIP: ULong,
    pub guest_ACFLAG: ULong,
    pub guest_IDFLAG: ULong,
    pub guest_FS_ZERO: ULong,
    pub guest_SSEROUND: ULong,
    pub guest_YMM0: U256,
    pub guest_YMM1: U256,
    pub guest_YMM2: U256,
    pub guest_YMM3: U256,
    pub guest_YMM4: U256,
    pub guest_YMM5: U256,
    pub guest_YMM6: U256,
    pub guest_YMM7: U256,
    pub guest_YMM8: U256,
    pub guest_YMM9: U256,
    pub guest_YMM10: U256,
    pub guest_YMM11: U256,
    pub guest_YMM12: U256,
    pub guest_YMM13: U256,
    pub guest_YMM14: U256,
    pub guest_YMM15: U256,
    pub guest_YMM16: U256,
    pub guest_FTOP: UInt,
    pub guest_FPREG: [ULong; 8usize],
    pub guest_FPTAG: [UChar; 8usize],
    pub guest_FPROUND: ULong,
    pub guest_FC3210: ULong,
    pub guest_EMNOTE: UInt,
    pub guest_CMSTART: ULong,
    pub guest_CMLEN: ULong,
    pub guest_NRADDR: ULong,
    pub guest_SC_CLASS: ULong,
    pub guest_GS_0x60: ULong,
    pub guest_IP_AT_SYSCALL: ULong,
    pub pad1: ULong,
}
impl ::std::clone::Clone for VexGuestAMD64State {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for VexGuestAMD64State {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct VexGuestARMState {
    pub host_EvC_FAILADDR: UInt,
    pub host_EvC_COUNTER: UInt,
    pub guest_R0: UInt,
    pub guest_R1: UInt,
    pub guest_R2: UInt,
    pub guest_R3: UInt,
    pub guest_R4: UInt,
    pub guest_R5: UInt,
    pub guest_R6: UInt,
    pub guest_R7: UInt,
    pub guest_R8: UInt,
    pub guest_R9: UInt,
    pub guest_R10: UInt,
    pub guest_R11: UInt,
    pub guest_R12: UInt,
    pub guest_R13: UInt,
    pub guest_R14: UInt,
    pub guest_R15T: UInt,
    pub guest_CC_OP: UInt,
    pub guest_CC_DEP1: UInt,
    pub guest_CC_DEP2: UInt,
    pub guest_CC_NDEP: UInt,
    pub guest_QFLAG32: UInt,
    pub guest_GEFLAG0: UInt,
    pub guest_GEFLAG1: UInt,
    pub guest_GEFLAG2: UInt,
    pub guest_GEFLAG3: UInt,
    pub guest_EMNOTE: UInt,
    pub guest_CMSTART: UInt,
    pub guest_CMLEN: UInt,
    pub guest_NRADDR: UInt,
    pub guest_IP_AT_SYSCALL: UInt,
    pub guest_D0: ULong,
    pub guest_D1: ULong,
    pub guest_D2: ULong,
    pub guest_D3: ULong,
    pub guest_D4: ULong,
    pub guest_D5: ULong,
    pub guest_D6: ULong,
    pub guest_D7: ULong,
    pub guest_D8: ULong,
    pub guest_D9: ULong,
    pub guest_D10: ULong,
    pub guest_D11: ULong,
    pub guest_D12: ULong,
    pub guest_D13: ULong,
    pub guest_D14: ULong,
    pub guest_D15: ULong,
    pub guest_D16: ULong,
    pub guest_D17: ULong,
    pub guest_D18: ULong,
    pub guest_D19: ULong,
    pub guest_D20: ULong,
    pub guest_D21: ULong,
    pub guest_D22: ULong,
    pub guest_D23: ULong,
    pub guest_D24: ULong,
    pub guest_D25: ULong,
    pub guest_D26: ULong,
    pub guest_D27: ULong,
    pub guest_D28: ULong,
    pub guest_D29: ULong,
    pub guest_D30: ULong,
    pub guest_D31: ULong,
    pub guest_FPSCR: UInt,
    pub guest_TPIDRURO: UInt,
    pub guest_ITSTATE: UInt,
    pub padding1: UInt,
}
impl ::std::clone::Clone for VexGuestARMState {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for VexGuestARMState {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct VexGuestARM64State {
    pub host_EvC_FAILADDR: ULong,
    pub host_EvC_COUNTER: UInt,
    pub pad0: UInt,
    pub guest_X0: ULong,
    pub guest_X1: ULong,
    pub guest_X2: ULong,
    pub guest_X3: ULong,
    pub guest_X4: ULong,
    pub guest_X5: ULong,
    pub guest_X6: ULong,
    pub guest_X7: ULong,
    pub guest_X8: ULong,
    pub guest_X9: ULong,
    pub guest_X10: ULong,
    pub guest_X11: ULong,
    pub guest_X12: ULong,
    pub guest_X13: ULong,
    pub guest_X14: ULong,
    pub guest_X15: ULong,
    pub guest_X16: ULong,
    pub guest_X17: ULong,
    pub guest_X18: ULong,
    pub guest_X19: ULong,
    pub guest_X20: ULong,
    pub guest_X21: ULong,
    pub guest_X22: ULong,
    pub guest_X23: ULong,
    pub guest_X24: ULong,
    pub guest_X25: ULong,
    pub guest_X26: ULong,
    pub guest_X27: ULong,
    pub guest_X28: ULong,
    pub guest_X29: ULong,
    pub guest_X30: ULong,
    pub guest_XSP: ULong,
    pub guest_PC: ULong,
    pub guest_CC_OP: ULong,
    pub guest_CC_DEP1: ULong,
    pub guest_CC_DEP2: ULong,
    pub guest_CC_NDEP: ULong,
    pub guest_TPIDR_EL0: ULong,
    pub guest_Q0: U128,
    pub guest_Q1: U128,
    pub guest_Q2: U128,
    pub guest_Q3: U128,
    pub guest_Q4: U128,
    pub guest_Q5: U128,
    pub guest_Q6: U128,
    pub guest_Q7: U128,
    pub guest_Q8: U128,
    pub guest_Q9: U128,
    pub guest_Q10: U128,
    pub guest_Q11: U128,
    pub guest_Q12: U128,
    pub guest_Q13: U128,
    pub guest_Q14: U128,
    pub guest_Q15: U128,
    pub guest_Q16: U128,
    pub guest_Q17: U128,
    pub guest_Q18: U128,
    pub guest_Q19: U128,
    pub guest_Q20: U128,
    pub guest_Q21: U128,
    pub guest_Q22: U128,
    pub guest_Q23: U128,
    pub guest_Q24: U128,
    pub guest_Q25: U128,
    pub guest_Q26: U128,
    pub guest_Q27: U128,
    pub guest_Q28: U128,
    pub guest_Q29: U128,
    pub guest_Q30: U128,
    pub guest_Q31: U128,
    pub guest_QCFLAG: U128,
    pub guest_EMNOTE: UInt,
    pub guest_CMSTART: ULong,
    pub guest_CMLEN: ULong,
    pub guest_NRADDR: ULong,
    pub guest_IP_AT_SYSCALL: ULong,
    pub guest_FPCR: UInt,
}
impl ::std::clone::Clone for VexGuestARM64State {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for VexGuestARM64State {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct VexGuestMIPS32State {
    pub guest_r0: UInt,
    pub guest_r1: UInt,
    pub guest_r2: UInt,
    pub guest_r3: UInt,
    pub guest_r4: UInt,
    pub guest_r5: UInt,
    pub guest_r6: UInt,
    pub guest_r7: UInt,
    pub guest_r8: UInt,
    pub guest_r9: UInt,
    pub guest_r10: UInt,
    pub guest_r11: UInt,
    pub guest_r12: UInt,
    pub guest_r13: UInt,
    pub guest_r14: UInt,
    pub guest_r15: UInt,
    pub guest_r16: UInt,
    pub guest_r17: UInt,
    pub guest_r18: UInt,
    pub guest_r19: UInt,
    pub guest_r20: UInt,
    pub guest_r21: UInt,
    pub guest_r22: UInt,
    pub guest_r23: UInt,
    pub guest_r24: UInt,
    pub guest_r25: UInt,
    pub guest_r26: UInt,
    pub guest_r27: UInt,
    pub guest_r28: UInt,
    pub guest_r29: UInt,
    pub guest_r30: UInt,
    pub guest_r31: UInt,
    pub guest_PC: UInt,
    pub guest_HI: UInt,
    pub guest_LO: UInt,
    pub guest_f0: ULong,
    pub guest_f1: ULong,
    pub guest_f2: ULong,
    pub guest_f3: ULong,
    pub guest_f4: ULong,
    pub guest_f5: ULong,
    pub guest_f6: ULong,
    pub guest_f7: ULong,
    pub guest_f8: ULong,
    pub guest_f9: ULong,
    pub guest_f10: ULong,
    pub guest_f11: ULong,
    pub guest_f12: ULong,
    pub guest_f13: ULong,
    pub guest_f14: ULong,
    pub guest_f15: ULong,
    pub guest_f16: ULong,
    pub guest_f17: ULong,
    pub guest_f18: ULong,
    pub guest_f19: ULong,
    pub guest_f20: ULong,
    pub guest_f21: ULong,
    pub guest_f22: ULong,
    pub guest_f23: ULong,
    pub guest_f24: ULong,
    pub guest_f25: ULong,
    pub guest_f26: ULong,
    pub guest_f27: ULong,
    pub guest_f28: ULong,
    pub guest_f29: ULong,
    pub guest_f30: ULong,
    pub guest_f31: ULong,
    pub guest_FIR: UInt,
    pub guest_FCCR: UInt,
    pub guest_FEXR: UInt,
    pub guest_FENR: UInt,
    pub guest_FCSR: UInt,
    pub guest_ULR: UInt,
    pub guest_EMNOTE: UInt,
    pub guest_CMSTART: UInt,
    pub guest_CMLEN: UInt,
    pub guest_NRADDR: UInt,
    pub host_EvC_FAILADDR: UInt,
    pub host_EvC_COUNTER: UInt,
    pub guest_COND: UInt,
    pub guest_DSPControl: UInt,
    pub guest_ac0: ULong,
    pub guest_ac1: ULong,
    pub guest_ac2: ULong,
    pub guest_ac3: ULong,
    pub padding: UInt,
}
impl ::std::clone::Clone for VexGuestMIPS32State {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for VexGuestMIPS32State {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VexEmNote = ::libc::c_uint;
pub const EmNote_NONE: ::libc::c_uint = 0;
pub const EmWarn_X86_x87exns: ::libc::c_uint = 1;
pub const EmWarn_X86_x87precision: ::libc::c_uint = 2;
pub const EmWarn_X86_sseExns: ::libc::c_uint = 3;
pub const EmWarn_X86_fz: ::libc::c_uint = 4;
pub const EmWarn_X86_daz: ::libc::c_uint = 5;
pub const EmWarn_X86_acFlag: ::libc::c_uint = 6;
pub const EmWarn_PPCexns: ::libc::c_uint = 7;
pub const EmWarn_PPC64_redir_overflow: ::libc::c_uint = 8;
pub const EmWarn_PPC64_redir_underflow: ::libc::c_uint = 9;
pub const EmWarn_S390X_fpext_rounding: ::libc::c_uint = 10;
pub const EmWarn_S390X_invalid_rounding: ::libc::c_uint = 11;
pub const EmFail_S390X_stfle: ::libc::c_uint = 12;
pub const EmFail_S390X_stckf: ::libc::c_uint = 13;
pub const EmFail_S390X_ecag: ::libc::c_uint = 14;
pub const EmFail_S390X_fpext: ::libc::c_uint = 15;
pub const EmFail_S390X_invalid_PFPO_rounding_mode: ::libc::c_uint = 16;
pub const EmFail_S390X_invalid_PFPO_function: ::libc::c_uint = 17;
pub const EmNote_NUMBER: ::libc::c_uint = 18;
#[repr(C)]
#[derive(Copy)]
pub struct VexGuestMIPS64State {
    pub guest_r0: ULong,
    pub guest_r1: ULong,
    pub guest_r2: ULong,
    pub guest_r3: ULong,
    pub guest_r4: ULong,
    pub guest_r5: ULong,
    pub guest_r6: ULong,
    pub guest_r7: ULong,
    pub guest_r8: ULong,
    pub guest_r9: ULong,
    pub guest_r10: ULong,
    pub guest_r11: ULong,
    pub guest_r12: ULong,
    pub guest_r13: ULong,
    pub guest_r14: ULong,
    pub guest_r15: ULong,
    pub guest_r16: ULong,
    pub guest_r17: ULong,
    pub guest_r18: ULong,
    pub guest_r19: ULong,
    pub guest_r20: ULong,
    pub guest_r21: ULong,
    pub guest_r22: ULong,
    pub guest_r23: ULong,
    pub guest_r24: ULong,
    pub guest_r25: ULong,
    pub guest_r26: ULong,
    pub guest_r27: ULong,
    pub guest_r28: ULong,
    pub guest_r29: ULong,
    pub guest_r30: ULong,
    pub guest_r31: ULong,
    pub guest_PC: ULong,
    pub guest_HI: ULong,
    pub guest_LO: ULong,
    pub guest_f0: ULong,
    pub guest_f1: ULong,
    pub guest_f2: ULong,
    pub guest_f3: ULong,
    pub guest_f4: ULong,
    pub guest_f5: ULong,
    pub guest_f6: ULong,
    pub guest_f7: ULong,
    pub guest_f8: ULong,
    pub guest_f9: ULong,
    pub guest_f10: ULong,
    pub guest_f11: ULong,
    pub guest_f12: ULong,
    pub guest_f13: ULong,
    pub guest_f14: ULong,
    pub guest_f15: ULong,
    pub guest_f16: ULong,
    pub guest_f17: ULong,
    pub guest_f18: ULong,
    pub guest_f19: ULong,
    pub guest_f20: ULong,
    pub guest_f21: ULong,
    pub guest_f22: ULong,
    pub guest_f23: ULong,
    pub guest_f24: ULong,
    pub guest_f25: ULong,
    pub guest_f26: ULong,
    pub guest_f27: ULong,
    pub guest_f28: ULong,
    pub guest_f29: ULong,
    pub guest_f30: ULong,
    pub guest_f31: ULong,
    pub guest_FIR: UInt,
    pub guest_FCCR: UInt,
    pub guest_FEXR: UInt,
    pub guest_FENR: UInt,
    pub guest_FCSR: UInt,
    pub guest_ULR: ULong,
    pub guest_EMNOTE: UInt,
    pub guest_CMSTART: ULong,
    pub guest_CMLEN: ULong,
    pub guest_NRADDR: ULong,
    pub host_EvC_FAILADDR: ULong,
    pub host_EvC_COUNTER: UInt,
    pub guest_COND: UInt,
    pub padding: [UInt; 2usize],
}
impl ::std::clone::Clone for VexGuestMIPS64State {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for VexGuestMIPS64State {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct VexGuestPPC32State {
    pub host_EvC_FAILADDR: UInt,
    pub host_EvC_COUNTER: UInt,
    pub pad3: UInt,
    pub pad4: UInt,
    pub guest_GPR0: UInt,
    pub guest_GPR1: UInt,
    pub guest_GPR2: UInt,
    pub guest_GPR3: UInt,
    pub guest_GPR4: UInt,
    pub guest_GPR5: UInt,
    pub guest_GPR6: UInt,
    pub guest_GPR7: UInt,
    pub guest_GPR8: UInt,
    pub guest_GPR9: UInt,
    pub guest_GPR10: UInt,
    pub guest_GPR11: UInt,
    pub guest_GPR12: UInt,
    pub guest_GPR13: UInt,
    pub guest_GPR14: UInt,
    pub guest_GPR15: UInt,
    pub guest_GPR16: UInt,
    pub guest_GPR17: UInt,
    pub guest_GPR18: UInt,
    pub guest_GPR19: UInt,
    pub guest_GPR20: UInt,
    pub guest_GPR21: UInt,
    pub guest_GPR22: UInt,
    pub guest_GPR23: UInt,
    pub guest_GPR24: UInt,
    pub guest_GPR25: UInt,
    pub guest_GPR26: UInt,
    pub guest_GPR27: UInt,
    pub guest_GPR28: UInt,
    pub guest_GPR29: UInt,
    pub guest_GPR30: UInt,
    pub guest_GPR31: UInt,
    pub guest_VSR0: U128,
    pub guest_VSR1: U128,
    pub guest_VSR2: U128,
    pub guest_VSR3: U128,
    pub guest_VSR4: U128,
    pub guest_VSR5: U128,
    pub guest_VSR6: U128,
    pub guest_VSR7: U128,
    pub guest_VSR8: U128,
    pub guest_VSR9: U128,
    pub guest_VSR10: U128,
    pub guest_VSR11: U128,
    pub guest_VSR12: U128,
    pub guest_VSR13: U128,
    pub guest_VSR14: U128,
    pub guest_VSR15: U128,
    pub guest_VSR16: U128,
    pub guest_VSR17: U128,
    pub guest_VSR18: U128,
    pub guest_VSR19: U128,
    pub guest_VSR20: U128,
    pub guest_VSR21: U128,
    pub guest_VSR22: U128,
    pub guest_VSR23: U128,
    pub guest_VSR24: U128,
    pub guest_VSR25: U128,
    pub guest_VSR26: U128,
    pub guest_VSR27: U128,
    pub guest_VSR28: U128,
    pub guest_VSR29: U128,
    pub guest_VSR30: U128,
    pub guest_VSR31: U128,
    pub guest_VSR32: U128,
    pub guest_VSR33: U128,
    pub guest_VSR34: U128,
    pub guest_VSR35: U128,
    pub guest_VSR36: U128,
    pub guest_VSR37: U128,
    pub guest_VSR38: U128,
    pub guest_VSR39: U128,
    pub guest_VSR40: U128,
    pub guest_VSR41: U128,
    pub guest_VSR42: U128,
    pub guest_VSR43: U128,
    pub guest_VSR44: U128,
    pub guest_VSR45: U128,
    pub guest_VSR46: U128,
    pub guest_VSR47: U128,
    pub guest_VSR48: U128,
    pub guest_VSR49: U128,
    pub guest_VSR50: U128,
    pub guest_VSR51: U128,
    pub guest_VSR52: U128,
    pub guest_VSR53: U128,
    pub guest_VSR54: U128,
    pub guest_VSR55: U128,
    pub guest_VSR56: U128,
    pub guest_VSR57: U128,
    pub guest_VSR58: U128,
    pub guest_VSR59: U128,
    pub guest_VSR60: U128,
    pub guest_VSR61: U128,
    pub guest_VSR62: U128,
    pub guest_VSR63: U128,
    pub guest_CIA: UInt,
    pub guest_LR: UInt,
    pub guest_CTR: UInt,
    pub guest_XER_SO: UChar,
    pub guest_XER_OV: UChar,
    pub guest_XER_CA: UChar,
    pub guest_XER_BC: UChar,
    pub guest_CR0_321: UChar,
    pub guest_CR0_0: UChar,
    pub guest_CR1_321: UChar,
    pub guest_CR1_0: UChar,
    pub guest_CR2_321: UChar,
    pub guest_CR2_0: UChar,
    pub guest_CR3_321: UChar,
    pub guest_CR3_0: UChar,
    pub guest_CR4_321: UChar,
    pub guest_CR4_0: UChar,
    pub guest_CR5_321: UChar,
    pub guest_CR5_0: UChar,
    pub guest_CR6_321: UChar,
    pub guest_CR6_0: UChar,
    pub guest_CR7_321: UChar,
    pub guest_CR7_0: UChar,
    pub guest_FPROUND: UChar,
    pub guest_DFPROUND: UChar,
    pub pad1: UChar,
    pub pad2: UChar,
    pub guest_VRSAVE: UInt,
    pub guest_VSCR: UInt,
    pub guest_EMNOTE: UInt,
    pub guest_CMSTART: UInt,
    pub guest_CMLEN: UInt,
    pub guest_NRADDR: UInt,
    pub guest_NRADDR_GPR2: UInt,
    pub guest_REDIR_SP: UInt,
    pub guest_REDIR_STACK: [UInt; 32usize],
    pub guest_IP_AT_SYSCALL: UInt,
    pub guest_SPRG3_RO: UInt,
    pub padding1: UInt,
    pub guest_TFHAR: ULong,
    pub guest_TEXASR: ULong,
    pub guest_TFIAR: ULong,
    pub padding2: UInt,
}
impl ::std::clone::Clone for VexGuestPPC32State {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for VexGuestPPC32State {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct VexGuestPPC64State {
    pub host_EvC_FAILADDR: ULong,
    pub host_EvC_COUNTER: UInt,
    pub pad0: UInt,
    pub guest_GPR0: ULong,
    pub guest_GPR1: ULong,
    pub guest_GPR2: ULong,
    pub guest_GPR3: ULong,
    pub guest_GPR4: ULong,
    pub guest_GPR5: ULong,
    pub guest_GPR6: ULong,
    pub guest_GPR7: ULong,
    pub guest_GPR8: ULong,
    pub guest_GPR9: ULong,
    pub guest_GPR10: ULong,
    pub guest_GPR11: ULong,
    pub guest_GPR12: ULong,
    pub guest_GPR13: ULong,
    pub guest_GPR14: ULong,
    pub guest_GPR15: ULong,
    pub guest_GPR16: ULong,
    pub guest_GPR17: ULong,
    pub guest_GPR18: ULong,
    pub guest_GPR19: ULong,
    pub guest_GPR20: ULong,
    pub guest_GPR21: ULong,
    pub guest_GPR22: ULong,
    pub guest_GPR23: ULong,
    pub guest_GPR24: ULong,
    pub guest_GPR25: ULong,
    pub guest_GPR26: ULong,
    pub guest_GPR27: ULong,
    pub guest_GPR28: ULong,
    pub guest_GPR29: ULong,
    pub guest_GPR30: ULong,
    pub guest_GPR31: ULong,
    pub guest_VSR0: U128,
    pub guest_VSR1: U128,
    pub guest_VSR2: U128,
    pub guest_VSR3: U128,
    pub guest_VSR4: U128,
    pub guest_VSR5: U128,
    pub guest_VSR6: U128,
    pub guest_VSR7: U128,
    pub guest_VSR8: U128,
    pub guest_VSR9: U128,
    pub guest_VSR10: U128,
    pub guest_VSR11: U128,
    pub guest_VSR12: U128,
    pub guest_VSR13: U128,
    pub guest_VSR14: U128,
    pub guest_VSR15: U128,
    pub guest_VSR16: U128,
    pub guest_VSR17: U128,
    pub guest_VSR18: U128,
    pub guest_VSR19: U128,
    pub guest_VSR20: U128,
    pub guest_VSR21: U128,
    pub guest_VSR22: U128,
    pub guest_VSR23: U128,
    pub guest_VSR24: U128,
    pub guest_VSR25: U128,
    pub guest_VSR26: U128,
    pub guest_VSR27: U128,
    pub guest_VSR28: U128,
    pub guest_VSR29: U128,
    pub guest_VSR30: U128,
    pub guest_VSR31: U128,
    pub guest_VSR32: U128,
    pub guest_VSR33: U128,
    pub guest_VSR34: U128,
    pub guest_VSR35: U128,
    pub guest_VSR36: U128,
    pub guest_VSR37: U128,
    pub guest_VSR38: U128,
    pub guest_VSR39: U128,
    pub guest_VSR40: U128,
    pub guest_VSR41: U128,
    pub guest_VSR42: U128,
    pub guest_VSR43: U128,
    pub guest_VSR44: U128,
    pub guest_VSR45: U128,
    pub guest_VSR46: U128,
    pub guest_VSR47: U128,
    pub guest_VSR48: U128,
    pub guest_VSR49: U128,
    pub guest_VSR50: U128,
    pub guest_VSR51: U128,
    pub guest_VSR52: U128,
    pub guest_VSR53: U128,
    pub guest_VSR54: U128,
    pub guest_VSR55: U128,
    pub guest_VSR56: U128,
    pub guest_VSR57: U128,
    pub guest_VSR58: U128,
    pub guest_VSR59: U128,
    pub guest_VSR60: U128,
    pub guest_VSR61: U128,
    pub guest_VSR62: U128,
    pub guest_VSR63: U128,
    pub guest_CIA: ULong,
    pub guest_LR: ULong,
    pub guest_CTR: ULong,
    pub guest_XER_SO: UChar,
    pub guest_XER_OV: UChar,
    pub guest_XER_CA: UChar,
    pub guest_XER_BC: UChar,
    pub guest_CR0_321: UChar,
    pub guest_CR0_0: UChar,
    pub guest_CR1_321: UChar,
    pub guest_CR1_0: UChar,
    pub guest_CR2_321: UChar,
    pub guest_CR2_0: UChar,
    pub guest_CR3_321: UChar,
    pub guest_CR3_0: UChar,
    pub guest_CR4_321: UChar,
    pub guest_CR4_0: UChar,
    pub guest_CR5_321: UChar,
    pub guest_CR5_0: UChar,
    pub guest_CR6_321: UChar,
    pub guest_CR6_0: UChar,
    pub guest_CR7_321: UChar,
    pub guest_CR7_0: UChar,
    pub guest_FPROUND: UChar,
    pub guest_DFPROUND: UChar,
    pub pad1: UChar,
    pub pad2: UChar,
    pub guest_VRSAVE: UInt,
    pub guest_VSCR: UInt,
    pub guest_EMNOTE: UInt,
    pub padding: UInt,
    pub guest_CMSTART: ULong,
    pub guest_CMLEN: ULong,
    pub guest_NRADDR: ULong,
    pub guest_NRADDR_GPR2: ULong,
    pub guest_REDIR_SP: ULong,
    pub guest_REDIR_STACK: [ULong; 32usize],
    pub guest_IP_AT_SYSCALL: ULong,
    pub guest_SPRG3_RO: ULong,
    pub guest_TFHAR: ULong,
    pub guest_TEXASR: ULong,
    pub guest_TFIAR: ULong,
}
impl ::std::clone::Clone for VexGuestPPC64State {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for VexGuestPPC64State {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct VexGuestS390XState {
    pub guest_a0: UInt,
    pub guest_a1: UInt,
    pub guest_a2: UInt,
    pub guest_a3: UInt,
    pub guest_a4: UInt,
    pub guest_a5: UInt,
    pub guest_a6: UInt,
    pub guest_a7: UInt,
    pub guest_a8: UInt,
    pub guest_a9: UInt,
    pub guest_a10: UInt,
    pub guest_a11: UInt,
    pub guest_a12: UInt,
    pub guest_a13: UInt,
    pub guest_a14: UInt,
    pub guest_a15: UInt,
    pub guest_f0: ULong,
    pub guest_f1: ULong,
    pub guest_f2: ULong,
    pub guest_f3: ULong,
    pub guest_f4: ULong,
    pub guest_f5: ULong,
    pub guest_f6: ULong,
    pub guest_f7: ULong,
    pub guest_f8: ULong,
    pub guest_f9: ULong,
    pub guest_f10: ULong,
    pub guest_f11: ULong,
    pub guest_f12: ULong,
    pub guest_f13: ULong,
    pub guest_f14: ULong,
    pub guest_f15: ULong,
    pub guest_r0: ULong,
    pub guest_r1: ULong,
    pub guest_r2: ULong,
    pub guest_r3: ULong,
    pub guest_r4: ULong,
    pub guest_r5: ULong,
    pub guest_r6: ULong,
    pub guest_r7: ULong,
    pub guest_r8: ULong,
    pub guest_r9: ULong,
    pub guest_r10: ULong,
    pub guest_r11: ULong,
    pub guest_r12: ULong,
    pub guest_r13: ULong,
    pub guest_r14: ULong,
    pub guest_r15: ULong,
    pub guest_counter: ULong,
    pub guest_fpc: UInt,
    pub unused: [UChar; 4usize],
    pub guest_IA: ULong,
    pub guest_SYSNO: ULong,
    pub guest_CC_OP: ULong,
    pub guest_CC_DEP1: ULong,
    pub guest_CC_DEP2: ULong,
    pub guest_CC_NDEP: ULong,
    pub guest_NRADDR: ULong,
    pub guest_CMSTART: ULong,
    pub guest_CMLEN: ULong,
    pub guest_IP_AT_SYSCALL: ULong,
    pub guest_EMNOTE: UInt,
    pub host_EvC_COUNTER: UInt,
    pub host_EvC_FAILADDR: ULong,
    pub padding: [UChar; 0usize],
}
impl ::std::clone::Clone for VexGuestS390XState {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for VexGuestS390XState {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_XxxConstants = ::libc::c_uint;
pub const VEX_HWCAPS_X86_MMXEXT: ::libc::c_uint = 2;
pub const VEX_HWCAPS_X86_SSE1: ::libc::c_uint = 4;
pub const VEX_HWCAPS_X86_SSE2: ::libc::c_uint = 8;
pub const VEX_HWCAPS_X86_SSE3: ::libc::c_uint = 16;
pub const VEX_HWCAPS_X86_LZCNT: ::libc::c_uint = 32;
pub const VEX_HWCAPS_AMD64_SSE3: ::libc::c_uint = 32;
pub const VEX_HWCAPS_AMD64_CX16: ::libc::c_uint = 64;
pub const VEX_HWCAPS_AMD64_LZCNT: ::libc::c_uint = 128;
pub const VEX_HWCAPS_AMD64_AVX: ::libc::c_uint = 256;
pub const VEX_HWCAPS_AMD64_RDTSCP: ::libc::c_uint = 512;
pub const VEX_HWCAPS_AMD64_BMI: ::libc::c_uint = 1024;
pub const VEX_HWCAPS_AMD64_AVX2: ::libc::c_uint = 2048;
pub const VEX_HWCAPS_PPC32_F: ::libc::c_uint = 256;
pub const VEX_HWCAPS_PPC32_V: ::libc::c_uint = 512;
pub const VEX_HWCAPS_PPC32_FX: ::libc::c_uint = 1024;
pub const VEX_HWCAPS_PPC32_GX: ::libc::c_uint = 2048;
pub const VEX_HWCAPS_PPC32_VX: ::libc::c_uint = 4096;
pub const VEX_HWCAPS_PPC32_DFP: ::libc::c_uint = 131072;
pub const VEX_HWCAPS_PPC32_ISA2_07: ::libc::c_uint = 524288;
pub const VEX_HWCAPS_PPC64_V: ::libc::c_uint = 8192;
pub const VEX_HWCAPS_PPC64_FX: ::libc::c_uint = 16384;
pub const VEX_HWCAPS_PPC64_GX: ::libc::c_uint = 32768;
pub const VEX_HWCAPS_PPC64_VX: ::libc::c_uint = 65536;
pub const VEX_HWCAPS_PPC64_DFP: ::libc::c_uint = 262144;
pub const VEX_HWCAPS_PPC64_ISA2_07: ::libc::c_uint = 1048576;
pub const VEX_S390X_MODEL_Z900: ::libc::c_uint = 0;
pub const VEX_S390X_MODEL_Z800: ::libc::c_uint = 1;
pub const VEX_S390X_MODEL_Z990: ::libc::c_uint = 2;
pub const VEX_S390X_MODEL_Z890: ::libc::c_uint = 3;
pub const VEX_S390X_MODEL_Z9_EC: ::libc::c_uint = 4;
pub const VEX_S390X_MODEL_Z9_BC: ::libc::c_uint = 5;
pub const VEX_S390X_MODEL_Z10_EC: ::libc::c_uint = 6;
pub const VEX_S390X_MODEL_Z10_BC: ::libc::c_uint = 7;
pub const VEX_S390X_MODEL_Z196: ::libc::c_uint = 8;
pub const VEX_S390X_MODEL_Z114: ::libc::c_uint = 9;
pub const VEX_S390X_MODEL_ZEC12: ::libc::c_uint = 10;
pub const VEX_S390X_MODEL_ZBC12: ::libc::c_uint = 11;
pub const VEX_S390X_MODEL_UNKNOWN: ::libc::c_uint = 12;
pub const VEX_S390X_MODEL_MASK: ::libc::c_uint = 63;
pub const VEX_HWCAPS_S390X_LDISP: ::libc::c_uint = 64;
pub const VEX_HWCAPS_S390X_EIMM: ::libc::c_uint = 128;
pub const VEX_HWCAPS_S390X_GIE: ::libc::c_uint = 256;
pub const VEX_HWCAPS_S390X_DFP: ::libc::c_uint = 512;
pub const VEX_HWCAPS_S390X_FGX: ::libc::c_uint = 1024;
pub const VEX_HWCAPS_S390X_ETF2: ::libc::c_uint = 2048;
pub const VEX_HWCAPS_S390X_STFLE: ::libc::c_uint = 4096;
pub const VEX_HWCAPS_S390X_ETF3: ::libc::c_uint = 8192;
pub const VEX_HWCAPS_S390X_STCKF: ::libc::c_uint = 16384;
pub const VEX_HWCAPS_S390X_FPEXT: ::libc::c_uint = 32768;
pub const VEX_HWCAPS_S390X_LSC: ::libc::c_uint = 65536;
pub const VEX_HWCAPS_S390X_PFPO: ::libc::c_uint = 131072;
pub const VEX_HWCAPS_S390X_ALL: ::libc::c_uint = 262080;
pub const VEX_HWCAPS_ARM_VFP: ::libc::c_uint = 64;
pub const VEX_HWCAPS_ARM_VFP2: ::libc::c_uint = 128;
pub const VEX_HWCAPS_ARM_VFP3: ::libc::c_uint = 256;
pub const VEX_HWCAPS_ARM_NEON: ::libc::c_uint = 65536;
pub const VEX_PRID_COMP_MIPS: ::libc::c_uint = 65536;
pub const VEX_PRID_COMP_BROADCOM: ::libc::c_uint = 131072;
pub const VEX_PRID_COMP_NETLOGIC: ::libc::c_uint = 786432;
pub const VEX_PRID_COMP_CAVIUM: ::libc::c_uint = 851968;
pub const VEX_PRID_IMP_34K: ::libc::c_uint = 38144;
pub const VEX_PRID_IMP_74K: ::libc::c_uint = 38656;
pub const VEX_PRID_CPU_32FPR: ::libc::c_uint = 64;
pub const VEXGLO_N_ALWAYSDEFD: ::libc::c_uint = 24;
pub const NO_ROUNDING_MODE: ::libc::c_uint = -1;
pub const S390_REGNO_RETURN_VALUE: ::libc::c_uint = 2;
pub const S390_REGNO_TCHAIN_SCRATCH: ::libc::c_uint = 12;
pub const S390_REGNO_GUEST_STATE_POINTER: ::libc::c_uint = 13;
pub const S390_REGNO_LINK_REGISTER: ::libc::c_uint = 14;
pub const S390_REGNO_STACK_POINTER: ::libc::c_uint = 15;
pub const S390_OFFSET_SAVED_R2: ::libc::c_uint = 240;
pub const S390_OFFSET_SAVED_FPC_C: ::libc::c_uint = 232;
pub const S390_OFFSET_SAVED_FPC_V: ::libc::c_uint = 224;
pub const S390_INNERLOOP_FRAME_SIZE: ::libc::c_uint = 248;
pub const S390_FAC_MSA: ::libc::c_uint = 17;
pub const S390_FAC_LDISP: ::libc::c_uint = 18;
pub const S390_FAC_HFPMAS: ::libc::c_uint = 20;
pub const S390_FAC_EIMM: ::libc::c_uint = 21;
pub const S390_FAC_HFPUNX: ::libc::c_uint = 23;
pub const S390_FAC_ETF2: ::libc::c_uint = 24;
pub const S390_FAC_STCKF: ::libc::c_uint = 25;
pub const S390_FAC_PENH: ::libc::c_uint = 26;
pub const S390_FAC_ETF3: ::libc::c_uint = 30;
pub const S390_FAC_XCPUT: ::libc::c_uint = 31;
pub const S390_FAC_GIE: ::libc::c_uint = 34;
pub const S390_FAC_EXEXT: ::libc::c_uint = 35;
pub const S390_FAC_FPEXT: ::libc::c_uint = 37;
pub const S390_FAC_FPSE: ::libc::c_uint = 41;
pub const S390_FAC_DFP: ::libc::c_uint = 42;
pub const S390_FAC_PFPO: ::libc::c_uint = 44;
pub const S390_FAC_HIGHW: ::libc::c_uint = 45;
pub const S390_FAC_LSC: ::libc::c_uint = 45;
pub const S390_FAC_DFPZC: ::libc::c_uint = 48;
pub const S390_FAC_MISC: ::libc::c_uint = 49;
pub const S390_FAC_CTREXE: ::libc::c_uint = 50;
pub const S390_FAC_TREXE: ::libc::c_uint = 73;
pub const S390_FAC_MSA4: ::libc::c_uint = 77;
pub const S390_NUM_GPRPARMS: ::libc::c_uint = 5;
pub const S390_NUM_FACILITY_DW: ::libc::c_uint = 2;
extern "C" {
    pub static mut private_LibVEX_alloc_first: *mut HChar;
    pub static mut private_LibVEX_alloc_curr: *mut HChar;
    pub static mut private_LibVEX_alloc_last: *mut HChar;
}
extern "C" {
    pub fn ppIRType(arg1: IRType) -> ();
    pub fn sizeofIRType(arg1: IRType) -> Int;
    pub fn integerIRTypeOfSize(szB: Int) -> IRType;
    pub fn IRConst_U1(arg1: Bool) -> *mut IRConst;
    pub fn IRConst_U8(arg1: UChar) -> *mut IRConst;
    pub fn IRConst_U16(arg1: UShort) -> *mut IRConst;
    pub fn IRConst_U32(arg1: UInt) -> *mut IRConst;
    pub fn IRConst_U64(arg1: ULong) -> *mut IRConst;
    pub fn IRConst_F32(arg1: Float) -> *mut IRConst;
    pub fn IRConst_F32i(arg1: UInt) -> *mut IRConst;
    pub fn IRConst_F64(arg1: Double) -> *mut IRConst;
    pub fn IRConst_F64i(arg1: ULong) -> *mut IRConst;
    pub fn IRConst_V128(arg1: UShort) -> *mut IRConst;
    pub fn IRConst_V256(arg1: UInt) -> *mut IRConst;
    pub fn deepCopyIRConst(arg1: *mut IRConst) -> *mut IRConst;
    pub fn ppIRConst(arg1: *mut IRConst) -> ();
    pub fn eqIRConst(arg1: *mut IRConst, arg2: *mut IRConst) -> Bool;
    pub fn mkIRCallee(regparms: Int, name: *const HChar,
                      addr: *mut ::libc::c_void) -> *mut IRCallee;
    pub fn deepCopyIRCallee(arg1: *mut IRCallee) -> *mut IRCallee;
    pub fn ppIRCallee(arg1: *mut IRCallee) -> ();
    pub fn mkIRRegArray(arg1: Int, arg2: IRType, arg3: Int)
     -> *mut IRRegArray;
    pub fn deepCopyIRRegArray(arg1: *mut IRRegArray) -> *mut IRRegArray;
    pub fn ppIRRegArray(arg1: *mut IRRegArray) -> ();
    pub fn eqIRRegArray(arg1: *mut IRRegArray, arg2: *mut IRRegArray) -> Bool;
    pub fn ppIRTemp(arg1: IRTemp) -> ();
    pub fn ppIROp(arg1: IROp) -> ();
    pub fn IRExpr_Binder(binder: Int) -> *mut IRExpr;
    pub fn IRExpr_Get(off: Int, ty: IRType) -> *mut IRExpr;
    pub fn IRExpr_GetI(descr: *mut IRRegArray, ix: *mut IRExpr, bias: Int)
     -> *mut IRExpr;
    pub fn IRExpr_RdTmp(tmp: IRTemp) -> *mut IRExpr;
    pub fn IRExpr_Qop(op: IROp, arg1: *mut IRExpr, arg2: *mut IRExpr,
                      arg3: *mut IRExpr, arg4: *mut IRExpr) -> *mut IRExpr;
    pub fn IRExpr_Triop(op: IROp, arg1: *mut IRExpr, arg2: *mut IRExpr,
                        arg3: *mut IRExpr) -> *mut IRExpr;
    pub fn IRExpr_Binop(op: IROp, arg1: *mut IRExpr, arg2: *mut IRExpr)
     -> *mut IRExpr;
    pub fn IRExpr_Unop(op: IROp, arg: *mut IRExpr) -> *mut IRExpr;
    pub fn IRExpr_Load(end: IREndness, ty: IRType, addr: *mut IRExpr)
     -> *mut IRExpr;
    pub fn IRExpr_Const(con: *mut IRConst) -> *mut IRExpr;
    pub fn IRExpr_CCall(cee: *mut IRCallee, retty: IRType,
                        args: *mut *mut IRExpr) -> *mut IRExpr;
    pub fn IRExpr_ITE(cond: *mut IRExpr, iftrue: *mut IRExpr,
                      iffalse: *mut IRExpr) -> *mut IRExpr;
    pub fn IRExpr_VECRET() -> *mut IRExpr;
    pub fn IRExpr_BBPTR() -> *mut IRExpr;
    pub fn deepCopyIRExpr(arg1: *mut IRExpr) -> *mut IRExpr;
    pub fn ppIRExpr(arg1: *mut IRExpr) -> ();
    pub fn mkIRExprVec_0() -> *mut *mut IRExpr;
    pub fn mkIRExprVec_1(arg1: *mut IRExpr) -> *mut *mut IRExpr;
    pub fn mkIRExprVec_2(arg1: *mut IRExpr, arg2: *mut IRExpr)
     -> *mut *mut IRExpr;
    pub fn mkIRExprVec_3(arg1: *mut IRExpr, arg2: *mut IRExpr,
                         arg3: *mut IRExpr) -> *mut *mut IRExpr;
    pub fn mkIRExprVec_4(arg1: *mut IRExpr, arg2: *mut IRExpr,
                         arg3: *mut IRExpr, arg4: *mut IRExpr)
     -> *mut *mut IRExpr;
    pub fn mkIRExprVec_5(arg1: *mut IRExpr, arg2: *mut IRExpr,
                         arg3: *mut IRExpr, arg4: *mut IRExpr,
                         arg5: *mut IRExpr) -> *mut *mut IRExpr;
    pub fn mkIRExprVec_6(arg1: *mut IRExpr, arg2: *mut IRExpr,
                         arg3: *mut IRExpr, arg4: *mut IRExpr,
                         arg5: *mut IRExpr, arg6: *mut IRExpr)
     -> *mut *mut IRExpr;
    pub fn mkIRExprVec_7(arg1: *mut IRExpr, arg2: *mut IRExpr,
                         arg3: *mut IRExpr, arg4: *mut IRExpr,
                         arg5: *mut IRExpr, arg6: *mut IRExpr,
                         arg7: *mut IRExpr) -> *mut *mut IRExpr;
    pub fn mkIRExprVec_8(arg1: *mut IRExpr, arg2: *mut IRExpr,
                         arg3: *mut IRExpr, arg4: *mut IRExpr,
                         arg5: *mut IRExpr, arg6: *mut IRExpr,
                         arg7: *mut IRExpr, arg8: *mut IRExpr)
     -> *mut *mut IRExpr;
    pub fn shallowCopyIRExprVec(arg1: *mut *mut IRExpr) -> *mut *mut IRExpr;
    pub fn deepCopyIRExprVec(arg1: *mut *mut IRExpr) -> *mut *mut IRExpr;
    pub fn mkIRExpr_HWord(arg1: HWord) -> *mut IRExpr;
    pub fn mkIRExprCCall(retty: IRType, regparms: Int, name: *const HChar,
                         addr: *mut ::libc::c_void, args: *mut *mut IRExpr)
     -> *mut IRExpr;
    pub fn eqIRAtom(arg1: *mut IRExpr, arg2: *mut IRExpr) -> Bool;
    pub fn ppIRJumpKind(arg1: IRJumpKind) -> ();
    pub fn ppIREffect(arg1: IREffect) -> ();
    pub fn ppIRDirty(arg1: *mut IRDirty) -> ();
    pub fn emptyIRDirty() -> *mut IRDirty;
    pub fn deepCopyIRDirty(arg1: *mut IRDirty) -> *mut IRDirty;
    pub fn unsafeIRDirty_0_N(regparms: Int, name: *const HChar,
                             addr: *mut ::libc::c_void,
                             args: *mut *mut IRExpr) -> *mut IRDirty;
    pub fn unsafeIRDirty_1_N(dst: IRTemp, regparms: Int, name: *const HChar,
                             addr: *mut ::libc::c_void,
                             args: *mut *mut IRExpr) -> *mut IRDirty;
    pub fn ppIRMBusEvent(arg1: IRMBusEvent) -> ();
    pub fn ppIRCAS(cas: *mut IRCAS) -> ();
    pub fn mkIRCAS(oldHi: IRTemp, oldLo: IRTemp, end: IREndness,
                   addr: *mut IRExpr, expdHi: *mut IRExpr,
                   expdLo: *mut IRExpr, dataHi: *mut IRExpr,
                   dataLo: *mut IRExpr) -> *mut IRCAS;
    pub fn deepCopyIRCAS(arg1: *mut IRCAS) -> *mut IRCAS;
    pub fn ppIRPutI(puti: *mut IRPutI) -> ();
    pub fn mkIRPutI(descr: *mut IRRegArray, ix: *mut IRExpr, bias: Int,
                    data: *mut IRExpr) -> *mut IRPutI;
    pub fn deepCopyIRPutI(arg1: *mut IRPutI) -> *mut IRPutI;
    pub fn ppIRStoreG(sg: *mut IRStoreG) -> ();
    pub fn ppIRLoadGOp(cvt: IRLoadGOp) -> ();
    pub fn ppIRLoadG(lg: *mut IRLoadG) -> ();
    pub fn mkIRStoreG(end: IREndness, addr: *mut IRExpr, data: *mut IRExpr,
                      guard: *mut IRExpr) -> *mut IRStoreG;
    pub fn mkIRLoadG(end: IREndness, cvt: IRLoadGOp, dst: IRTemp,
                     addr: *mut IRExpr, alt: *mut IRExpr, guard: *mut IRExpr)
     -> *mut IRLoadG;
    pub fn IRStmt_NoOp() -> *mut IRStmt;
    pub fn IRStmt_IMark(addr: Addr64, len: Int, delta: UChar) -> *mut IRStmt;
    pub fn IRStmt_AbiHint(base: *mut IRExpr, len: Int, nia: *mut IRExpr)
     -> *mut IRStmt;
    pub fn IRStmt_Put(off: Int, data: *mut IRExpr) -> *mut IRStmt;
    pub fn IRStmt_PutI(details: *mut IRPutI) -> *mut IRStmt;
    pub fn IRStmt_WrTmp(tmp: IRTemp, data: *mut IRExpr) -> *mut IRStmt;
    pub fn IRStmt_Store(end: IREndness, addr: *mut IRExpr, data: *mut IRExpr)
     -> *mut IRStmt;
    pub fn IRStmt_StoreG(end: IREndness, addr: *mut IRExpr, data: *mut IRExpr,
                         guard: *mut IRExpr) -> *mut IRStmt;
    pub fn IRStmt_LoadG(end: IREndness, cvt: IRLoadGOp, dst: IRTemp,
                        addr: *mut IRExpr, alt: *mut IRExpr,
                        guard: *mut IRExpr) -> *mut IRStmt;
    pub fn IRStmt_CAS(details: *mut IRCAS) -> *mut IRStmt;
    pub fn IRStmt_LLSC(end: IREndness, result: IRTemp, addr: *mut IRExpr,
                       storedata: *mut IRExpr) -> *mut IRStmt;
    pub fn IRStmt_Dirty(details: *mut IRDirty) -> *mut IRStmt;
    pub fn IRStmt_MBE(event: IRMBusEvent) -> *mut IRStmt;
    pub fn IRStmt_Exit(guard: *mut IRExpr, jk: IRJumpKind, dst: *mut IRConst,
                       offsIP: Int) -> *mut IRStmt;
    pub fn deepCopyIRStmt(arg1: *mut IRStmt) -> *mut IRStmt;
    pub fn ppIRStmt(arg1: *mut IRStmt) -> ();
    pub fn newIRTemp(arg1: *mut IRTypeEnv, arg2: IRType) -> IRTemp;
    pub fn deepCopyIRTypeEnv(arg1: *mut IRTypeEnv) -> *mut IRTypeEnv;
    pub fn ppIRTypeEnv(arg1: *mut IRTypeEnv) -> ();
    pub fn emptyIRSB() -> *mut IRSB;
    pub fn deepCopyIRSB(arg1: *mut IRSB) -> *mut IRSB;
    pub fn deepCopyIRSBExceptStmts(arg1: *mut IRSB) -> *mut IRSB;
    pub fn ppIRSB(arg1: *mut IRSB) -> ();
    pub fn addStmtToIRSB(arg1: *mut IRSB, arg2: *mut IRStmt) -> ();
    pub fn emptyIRTypeEnv() -> *mut IRTypeEnv;
    pub fn typeOfIRConst(arg1: *mut IRConst) -> IRType;
    pub fn typeOfIRTemp(arg1: *mut IRTypeEnv, arg2: IRTemp) -> IRType;
    pub fn typeOfIRExpr(arg1: *mut IRTypeEnv, arg2: *mut IRExpr) -> IRType;
    pub fn typeOfIRLoadGOp(cvt: IRLoadGOp, t_res: *mut IRType,
                           t_arg: *mut IRType) -> ();
    pub fn sanityCheckIRSB(bb: *mut IRSB, caller: *const HChar,
                           require_flatness: Bool, guest_word_size: IRType)
     -> ();
    pub fn isFlatIRStmt(arg1: *mut IRStmt) -> Bool;
    pub fn isPlausibleIRType(ty: IRType) -> Bool;
    pub fn vex_inject_ir(arg1: *mut IRSB, arg2: IREndness) -> ();
    pub fn LibVEX_ppVexArch(arg1: VexArch) -> *const HChar;
    pub fn LibVEX_ppVexEndness(endness: VexEndness) -> *const HChar;
    pub fn LibVEX_ppVexHwCaps(arg1: VexArch, arg2: UInt) -> *const HChar;
    pub fn LibVEX_default_VexArchInfo(vai: *mut VexArchInfo) -> ();
    pub fn LibVEX_default_VexAbiInfo(vbi: *mut VexAbiInfo) -> ();
    pub fn LibVEX_default_VexControl(vcon: *mut VexControl) -> ();
    pub fn private_LibVEX_alloc_OOM() -> ();
    pub fn LibVEX_ShowAllocStats() -> ();
    pub fn LibVEX_Init(failure_exit:
                           ::std::option::Option<extern "C" fn() -> ()>,
                       log_bytes:
                           ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut HChar,
                                                                      nbytes:
                                                                          Int)
                                                     -> ()>, debuglevel: Int,
                       valgrind_support: Bool, vcon: *const VexControl) -> ();
    pub fn LibVEX_Translate(arg1: *mut VexTranslateArgs)
     -> VexTranslateResult;
    pub fn LibVEX_Chain(arch_host: VexArch, endhess_host: VexEndness,
                        place_to_chain: *mut ::libc::c_void,
                        disp_cp_chain_me_EXPECTED: *mut ::libc::c_void,
                        place_to_jump_to: *mut ::libc::c_void)
     -> VexInvalRange;
    pub fn LibVEX_UnChain(arch_host: VexArch, endness_host: VexEndness,
                          place_to_unchain: *mut ::libc::c_void,
                          place_to_jump_to_EXPECTED: *mut ::libc::c_void,
                          disp_cp_chain_me: *mut ::libc::c_void)
     -> VexInvalRange;
    pub fn LibVEX_evCheckSzB(arch_host: VexArch, endness_host: VexEndness)
     -> Int;
    pub fn LibVEX_PatchProfInc(arch_host: VexArch, endness_host: VexEndness,
                               place_to_patch: *mut ::libc::c_void,
                               location_of_counter: *mut ULong)
     -> VexInvalRange;
    pub fn LibVEX_ShowStats() -> ();
    pub fn LibVEX_InitIRI(arg1: *const IRICB) -> ();
    pub fn LibVEX_GuestX86_initialise(vex_state: *mut VexGuestX86State) -> ();
    pub fn LibVEX_GuestX86_get_eflags(vex_state: *const VexGuestX86State)
     -> UInt;
    pub fn LibVEX_GuestX86_put_eflag_c(new_carry_flag: UInt,
                                       vex_state: *mut VexGuestX86State)
     -> ();
    pub fn LibVEX_GuestAMD64_initialise(vex_state: *mut VexGuestAMD64State)
     -> ();
    pub fn LibVEX_GuestAMD64_get_rflags(vex_state: *const VexGuestAMD64State)
     -> ULong;
    pub fn LibVEX_GuestAMD64_put_rflag_c(new_carry_flag: ULong,
                                         vex_state: *mut VexGuestAMD64State)
     -> ();
    pub fn LibVEX_GuestARM_initialise(vex_state: *mut VexGuestARMState) -> ();
    pub fn LibVEX_GuestARM_get_cpsr(vex_state: *const VexGuestARMState)
     -> UInt;
    pub fn LibVEX_GuestARM64_initialise(vex_state: *mut VexGuestARM64State)
     -> ();
    pub fn LibVEX_GuestARM64_get_nzcv(vex_state: *const VexGuestARM64State)
     -> ULong;
    pub fn LibVEX_GuestARM64_get_fpsr(vex_state: *const VexGuestARM64State)
     -> ULong;
    pub fn LibVEX_GuestARM64_set_fpsr(vex_state: *mut VexGuestARM64State,
                                      fpsr: ULong) -> ();
    pub fn LibVEX_GuestMIPS32_initialise(vex_state: *mut VexGuestMIPS32State)
     -> ();
    pub fn LibVEX_EmNote_string(arg1: VexEmNote) -> *const HChar;
    pub fn LibVEX_GuestMIPS64_initialise(vex_state: *mut VexGuestMIPS64State)
     -> ();
    pub fn LibVEX_GuestPPC32_initialise(vex_state: *mut VexGuestPPC32State)
     -> ();
    pub fn LibVEX_GuestPPC32_put_CR(cr_native: UInt,
                                    vex_state: *mut VexGuestPPC32State) -> ();
    pub fn LibVEX_GuestPPC32_get_CR(vex_state: *const VexGuestPPC32State)
     -> UInt;
    pub fn LibVEX_GuestPPC32_put_XER(xer_native: UInt,
                                     vex_state: *mut VexGuestPPC32State)
     -> ();
    pub fn LibVEX_GuestPPC32_get_XER(vex_state: *const VexGuestPPC32State)
     -> UInt;
    pub fn LibVEX_GuestPPC64_initialise(vex_state: *mut VexGuestPPC64State)
     -> ();
    pub fn LibVEX_GuestPPC64_put_CR(cr_native: UInt,
                                    vex_state: *mut VexGuestPPC64State) -> ();
    pub fn LibVEX_GuestPPC64_get_CR(vex_state: *const VexGuestPPC64State)
     -> UInt;
    pub fn LibVEX_GuestPPC64_put_XER(xer_native: UInt,
                                     vex_state: *mut VexGuestPPC64State)
     -> ();
    pub fn LibVEX_GuestPPC64_get_XER(vex_state: *const VexGuestPPC64State)
     -> UInt;
    pub fn LibVEX_GuestS390X_initialise(arg1: *mut VexGuestS390XState) -> ();
}
